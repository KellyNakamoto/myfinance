// ==========================================
// TELEGRAM MINI APP INTEGRATION
// ==========================================
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
let tg = window.Telegram.WebApp;
tg.expand();
tg.ready();

// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É Telegram
document.documentElement.setAttribute('data-theme', tg.colorScheme);

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –≤ Telegram
tg.onEvent('themeChanged', function() {
    document.documentElement.setAttribute('data-theme', tg.colorScheme);
});

// ==========================================
// –ü–†–û–í–ï–†–ö–ê –í–ï–†–°–ò–ò –ò –ü–û–î–î–ï–†–ñ–ö–ò CLOUDSTORAGE
// ==========================================

console.log('Telegram WebApp version:', tg.version);
console.log('CloudStorage available:', typeof tg.CloudStorage !== 'undefined');

// –î–ª—è CloudStorage –Ω—É–∂–Ω–∞ –≤–µ—Ä—Å–∏—è 6.9+
const isCloudStorageSupported = tg.CloudStorage && typeof tg.CloudStorage.setItem === 'function';

// ==========================================
// –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• (HYBRID APPROACH)
// ==========================================

// –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥: CloudStorage + localStorage –∫–∞–∫ fallback
async function saveToTelegramCloud(data) {
    const dataString = JSON.stringify(data);
    let cloudSaved = false;
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Telegram CloudStorage
    if (isCloudStorageSupported) {
        try {
            await new Promise((resolve, reject) => {
                tg.CloudStorage.setItem('financeAppData', dataString, (error, result) => {
                    if (error) {
                        console.error('CloudStorage setItem error:', error);
                        reject(error);
                    } else {
                        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Telegram CloudStorage');
                        resolve(result);
                    }
                });
            });
            cloudSaved = true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ CloudStorage:', error);
        }
    } else {
        console.warn('‚ö†Ô∏è CloudStorage –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è (—Ç—Ä–µ–±—É–µ—Ç—Å—è Telegram v6.9+)');
    }
    
    // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    try {
        localStorage.setItem('financeAppData', dataString);
        localStorage.setItem('financeAppData_timestamp', Date.now().toString());
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage (backup)');
    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ localStorage:', e);
    }
    
    return cloudSaved;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async function loadFromTelegramCloud() {
    let cloudData = null;
    let localData = null;
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ CloudStorage
    if (isCloudStorageSupported) {
        try {
            const dataString = await new Promise((resolve, reject) => {
                tg.CloudStorage.getItem('financeAppData', (error, result) => {
                    if (error) {
                        console.error('CloudStorage getItem error:', error);
                        reject(error);
                    } else {
                        resolve(result);
                    }
                });
            });
            
            if (dataString && dataString.length > 0) {
                cloudData = JSON.parse(dataString);
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ CloudStorage');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ CloudStorage:', error);
        }
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage
    try {
        const localDataString = localStorage.getItem('financeAppData');
        const timestamp = localStorage.getItem('financeAppData_timestamp');
        
        if (localDataString) {
            localData = JSON.parse(localDataString);
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage');
            console.log('üìÖ –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', timestamp ? new Date(parseInt(timestamp)).toLocaleString('ru-RU') : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', error);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    if (cloudData && localData) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞, –≤—ã–±–∏—Ä–∞–µ–º –±–æ–ª–µ–µ —Å–≤–µ–∂–∏–π
        const cloudTimestamp = cloudData.lastModified || 0;
        const localTimestamp = parseInt(localStorage.getItem('financeAppData_timestamp')) || 0;
        
        if (cloudTimestamp > localTimestamp) {
            console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CloudStorage (–±–æ–ª–µ–µ —Å–≤–µ–∂–∏–µ)');
            return cloudData;
        } else {
            console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage (–±–æ–ª–µ–µ —Å–≤–µ–∂–∏–µ)');
            return localData;
        }
    }
    
    return cloudData || localData || null;
}

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –¥–∞–Ω–Ω—ã—Ö
let saveTimeout;
function autoSave() {
    clearTimeout(saveTimeout);
    saveTimeout = setTimeout(async () => {
        if (appData) {
            appData.lastModified = Date.now();
            await saveToTelegramCloud(appData);
            console.log('üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
        }
    }, 500); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ 0.5 —Å–µ–∫—É–Ω–¥—ã
}

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–≤—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏)
async function forceSave() {
    if (appData) {
        appData.lastModified = Date.now();
        await saveToTelegramCloud(appData);
        console.log('üíæ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
    }
}

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–∞—Å—Å–∏–≤–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
function makeArrayObservable(arr) {
    const methods = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];
    methods.forEach(method => {
        const original = arr[method];
        if (typeof original === 'function') {
            arr[method] = function(...args) {
                const result = original.apply(this, args);
                autoSave();
                return result;
            };
        }
    });
    return arr;
}

// ==========================================
// –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–• –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ
// ==========================================

function getDefaultAppData() {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', 
                        '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
    
    return {
        currentPeriod: {
            id: `${year}_${month}`,
            title: `${monthNames[now.getMonth()]} ${year}`,
            startDate: `${year}-${month}-01`,
            endDate: `${year}-${month}-${new Date(year, now.getMonth() + 1, 0).getDate()}`,
            incomes: [],
            fixedExpenses: [],
            savingsPercentage: 20,
            dailyExpenses: []
        },
        historicalData: [],
        categories: [
            {id: "food", name: "–ï–¥–∞", icon: "üçΩÔ∏è", color: "#FF6B35", keywords: ["–∫–∞—Ñ–µ", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–ø—Ä–æ–¥—É–∫—Ç—ã", "–µ–¥–∞", "–æ–±–µ–¥", "–∑–∞–≤—Ç—Ä–∞–∫", "—É–∂–∏–Ω"]},
            {id: "transport", name: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", icon: "üöó", color: "#4ECDC4", keywords: ["—Ç–∞–∫—Å–∏", "–∞–≤—Ç–æ–±—É—Å", "–º–µ—Ç—Ä–æ", "–±–µ–Ω–∑–∏–Ω", "–ø–∞—Ä–∫–æ–≤–∫–∞"]},
            {id: "entertainment", name: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", icon: "üé¨", color: "#45B7D1", keywords: ["–∫–∏–Ω–æ", "–∫–æ–Ω—Ü–µ—Ä—Ç", "–∏–≥—Ä—ã", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"]},
            {id: "shopping", name: "–ü–æ–∫—É–ø–∫–∏", icon: "üõçÔ∏è", color: "#F39C12", keywords: ["–æ–¥–µ–∂–¥–∞", "–æ–±—É–≤—å", "—Ç–µ—Ö–Ω–∏–∫–∞", "–ø–æ–∫—É–ø–∫–∏"]},
            {id: "housing", name: "–ñ–∏–ª—å–µ", icon: "üè†", color: "#E74C3C", keywords: ["–∫–≤–∞—Ä—Ç–∏—Ä–∞", "–∞—Ä–µ–Ω–¥–∞", "–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ"]},
            {id: "utilities", name: "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ", icon: "üì°", color: "#9B59B6", keywords: ["–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "—Ç–µ–ª–µ—Ñ–æ–Ω", "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ"]},
            {id: "health", name: "–ó–¥–æ—Ä–æ–≤—å–µ", icon: "‚öïÔ∏è", color: "#27AE60", keywords: ["–≤—Ä–∞—á", "–ª–µ–∫–∞—Ä—Å—Ç–≤–∞", "–∞–ø—Ç–µ–∫–∞"]},
            {id: "other", name: "–ü—Ä–æ—á–µ–µ", icon: "üìã", color: "#95A5A6", keywords: []}
        ],
        predictions: {
            endOfMonthSpending: 0,
            confidenceLevel: 0,
            recommendedDailyBudget: 0,
            trendDirection: "stable",
            anomalies: []
        },
        patterns: {
            weekdayVsWeekend: {weekday: 0, weekend: 0},
            regularExpenses: [],
            seasonalTrends: {
                highest_month: "",
                lowest_month: ""
            }
        },
        lastModified: Date.now()
    };
}

// ==========================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// ==========================================

let appData = null;
let isInitialized = false;

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
(async function initializeApp() {
    console.log('üöÄ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const loadingIndicator = document.getElementById('loadingIndicator');
        if (loadingIndicator) {
            loadingIndicator.style.display = 'block';
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        const savedData = await loadFromTelegramCloud();
        
        if (savedData) {
            console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            appData = savedData;
        } else {
            console.log('üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            appData = getDefaultAppData();
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await saveToTelegramCloud(appData);
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫ –º–∞—Å—Å–∏–≤–∞–º
        if (appData && appData.currentPeriod) {
            appData.currentPeriod.incomes = makeArrayObservable(appData.currentPeriod.incomes || []);
            appData.currentPeriod.fixedExpenses = makeArrayObservable(appData.currentPeriod.fixedExpenses || []);
            appData.currentPeriod.dailyExpenses = makeArrayObservable(appData.currentPeriod.dailyExpenses || []);
        }
        
        if (appData.historicalData) {
            appData.historicalData = makeArrayObservable(appData.historicalData);
        }
        
        // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', startApp);
        } else {
            startApp();
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        appData = getDefaultAppData();
        showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –°–æ–∑–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.', 'warning');
        
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', startApp);
        } else {
            startApp();
        }
    }
})();

function startApp() {
    if (isInitialized) return;
    isInitialized = true;
    
    console.log('üéØ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const loadingIndicator = document.getElementById('loadingIndicator');
    if (loadingIndicator) {
        loadingIndicator.style.display = 'none';
    }
    
    initializeTabs();
    loadInitialData();
    updateAllCalculations();
    initializeCharts();
    initializeCalendarHeatmap();
    
    showToast('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', 'success');
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.addEventListener('beforeunload', () => {
    forceSave();
});

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞ (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
window.addEventListener('blur', () => {
    forceSave();
});

// Telegram-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
tg.onEvent('viewportChanged', () => {
    if (!tg.isExpanded) {
        forceSave();
    }
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(() => {
    if (appData) {
        forceSave();
    }
}, 30000);

// ==========================================
// –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–ö–õ–ê–î–ö–ê–ú–ò
// ==========================================

function initializeTabs() {
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');
    
    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            const tabId = button.dataset.tab;
            
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            tabButtons.forEach(btn => btn.classList.remove('active'));
            tabContents.forEach(content => content.classList.remove('active'));
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            button.classList.add('active');
            document.getElementById(tabId).classList.add('active');
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
            if (tabId === 'analytics') {
                setTimeout(() => {
                    updateCharts();
                }, 100);
            }
        });
    });
}

// ==========================================
// –ó–ê–ì–†–£–ó–ö–ê –ù–ê–ß–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•
// ==========================================

function loadInitialData() {
    if (!appData) return;
    
    renderIncomes();
    renderFixedExpenses();
    renderDailyExpenses();
    renderArchive();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–æ—Ä–º
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');
    const savingsInput = document.getElementById('savingsPercentage');
    
    if (startDateInput) startDateInput.value = appData.currentPeriod.startDate;
    if (endDateInput) endDateInput.value = appData.currentPeriod.endDate;
    if (savingsInput) savingsInput.value = appData.currentPeriod.savingsPercentage;
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
// (addIncome, removeIncome, renderIncomes, addFixedExpense, –∏ —Ç.–¥.)
