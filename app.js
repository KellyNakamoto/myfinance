// ==========================================
// TELEGRAM MINI APP INTEGRATION
// ==========================================
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
let tg = window.Telegram.WebApp;
tg.expand(); // –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
tg.ready(); // –°–æ–æ–±—â–∏—Ç—å —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ

// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É Telegram
document.documentElement.setAttribute('data-theme', tg.colorScheme);

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –≤ Telegram
tg.onEvent('themeChanged', function() {
    document.documentElement.setAttribute('data-theme', tg.colorScheme);
});

// ==========================================
// –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –í TELEGRAM CLOUD STORAGE
// ==========================================

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±–ª–∞–∫–æ Telegram
async function saveToTelegramCloud(data) {
    try {
        const dataString = JSON.stringify(data);
        await tg.CloudStorage.setItem('financeAppData', dataString);
        console.log('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Telegram Cloud');
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Telegram Cloud:', error);
        // Fallback –Ω–∞ localStorage –µ—Å–ª–∏ CloudStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        localStorage.setItem('financeAppData', dataString);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–ª–∞–∫–∞ Telegram
async function loadFromTelegramCloud() {
    try {
        const dataString = await new Promise((resolve, reject) => {
            tg.CloudStorage.getItem('financeAppData', (error, result) => {
                if (error) reject(error);
                else resolve(result);
            });
        });
        
        if (dataString) {
            console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Telegram Cloud');
            return JSON.parse(dataString);
        }
        return null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Telegram Cloud:', error);
        // Fallback –Ω–∞ localStorage
        const localData = localStorage.getItem('financeAppData');
        return localData ? JSON.parse(localData) : null;
    }
}

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –¥–∞–Ω–Ω—ã—Ö
let saveTimeout;
function autoSave() {
    clearTimeout(saveTimeout);
    saveTimeout = setTimeout(() => {
        saveToTelegramCloud(appData);
    }, 1000); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
}

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–∞—Å—Å–∏–≤–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
function makeArrayObservable(arr) {
    const methods = ['push', 'pop', 'shift', 'unshift', 'splice'];
    methods.forEach(method => {
        const original = arr[method];
        arr[method] = function(...args) {
            const result = original.apply(this, args);
            autoSave();
            return result;
        };
    });
    return arr;
}

// ==========================================
// –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–• –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ
// ==========================================

function getDefaultAppData() {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', 
                        '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
    
    return {
        currentPeriod: {
            id: `${year}_${month}`,
            title: `${monthNames[now.getMonth()]} ${year}`,
            startDate: `${year}-${month}-01`,
            endDate: `${year}-${month}-${new Date(year, now.getMonth() + 1, 0).getDate()}`,
            incomes: [],
            fixedExpenses: [],
            savingsPercentage: 20,
            dailyExpenses: []
        },
        historicalData: [],
        categories: [
            {id: "food", name: "–ï–¥–∞", icon: "üçΩÔ∏è", color: "#FF6B35", keywords: ["–∫–∞—Ñ–µ", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–ø—Ä–æ–¥—É–∫—Ç—ã", "–µ–¥–∞", "–æ–±–µ–¥", "–∑–∞–≤—Ç—Ä–∞–∫", "—É–∂–∏–Ω"]},
            {id: "transport", name: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", icon: "üöó", color: "#4ECDC4", keywords: ["—Ç–∞–∫—Å–∏", "–∞–≤—Ç–æ–±—É—Å", "–º–µ—Ç—Ä–æ", "–±–µ–Ω–∑–∏–Ω", "–ø–∞—Ä–∫–æ–≤–∫–∞"]},
            {id: "entertainment", name: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", icon: "üé¨", color: "#45B7D1", keywords: ["–∫–∏–Ω–æ", "–∫–æ–Ω—Ü–µ—Ä—Ç", "–∏–≥—Ä—ã", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"]},
            {id: "shopping", name: "–ü–æ–∫—É–ø–∫–∏", icon: "üõçÔ∏è", color: "#F39C12", keywords: ["–æ–¥–µ–∂–¥–∞", "–æ–±—É–≤—å", "—Ç–µ—Ö–Ω–∏–∫–∞", "–ø–æ–∫—É–ø–∫–∏"]},
            {id: "housing", name: "–ñ–∏–ª—å–µ", icon: "üè†", color: "#E74C3C", keywords: ["–∫–≤–∞—Ä—Ç–∏—Ä–∞", "–∞—Ä–µ–Ω–¥–∞", "–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ"]},
            {id: "utilities", name: "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ", icon: "üì°", color: "#9B59B6", keywords: ["–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "—Ç–µ–ª–µ—Ñ–æ–Ω", "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ"]},
            {id: "health", name: "–ó–¥–æ—Ä–æ–≤—å–µ", icon: "‚öïÔ∏è", color: "#27AE60", keywords: ["–≤—Ä–∞—á", "–ª–µ–∫–∞—Ä—Å—Ç–≤–∞", "–∞–ø—Ç–µ–∫–∞"]},
            {id: "other", name: "–ü—Ä–æ—á–µ–µ", icon: "üìã", color: "#95A5A6", keywords: []}
        ],
        predictions: {
            endOfMonthSpending: 0,
            confidenceLevel: 0,
            recommendedDailyBudget: 0,
            trendDirection: "stable",
            anomalies: []
        },
        patterns: {
            weekdayVsWeekend: {weekday: 0, weekend: 0},
            regularExpenses: [],
            seasonalTrends: {
                highest_month: "",
                lowest_month: ""
            }
        }
    };
}

// ==========================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// ==========================================

let appData = null;

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
(async function initializeApp() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram Cloud Storage
        const savedData = await loadFromTelegramCloud();
        
        if (savedData) {
            console.log('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            appData = savedData;
        } else {
            console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            appData = getDefaultAppData();
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await saveToTelegramCloud(appData);
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫ –º–∞—Å—Å–∏–≤–∞–º
        if (appData && appData.currentPeriod) {
            appData.currentPeriod.incomes = makeArrayObservable(appData.currentPeriod.incomes || []);
            appData.currentPeriod.fixedExpenses = makeArrayObservable(appData.currentPeriod.fixedExpenses || []);
            appData.currentPeriod.dailyExpenses = makeArrayObservable(appData.currentPeriod.dailyExpenses || []);
        }
        
        if (appData.historicalData) {
            appData.historicalData = makeArrayObservable(appData.historicalData);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        document.addEventListener('DOMContentLoaded', function() {
            initializeTabs();
            loadInitialData();
            updateAllCalculations();
            initializeCharts();
            initializeCalendarHeatmap();
            showToast('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', 'success');
        });
        
        // –ï—Å–ª–∏ DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        if (document.readyState === 'loading') {
            // DOMContentLoaded —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–∑–∂–µ
        } else {
            // DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É
            initializeTabs();
            loadInitialData();
            updateAllCalculations();
            initializeCharts();
            initializeCalendarHeatmap();
            showToast('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', 'success');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        appData = getDefaultAppData();
        showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –°–æ–∑–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.', 'warning');
    }
})();

// ==========================================
// –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–ö–õ–ê–î–ö–ê–ú–ò
// ==========================================

function initializeTabs() {
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');
    
    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            const tabId = button.dataset.tab;
            
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            tabButtons.forEach(btn => btn.classList.remove('active'));
            tabContents.forEach(content => content.classList.remove('active'));
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            button.classList.add('active');
            document.getElementById(tabId).classList.add('active');
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
            if (tabId === 'analytics') {
                setTimeout(() => {
                    updateCharts();
                }, 100);
            }
        });
    });
}

// ==========================================
// –ó–ê–ì–†–£–ó–ö–ê –ù–ê–ß–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•
// ==========================================

function loadInitialData() {
    if (!appData) return;
    
    renderIncomes();
    renderFixedExpenses();
    renderDailyExpenses();
    renderArchive();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–æ—Ä–º
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');
    const savingsInput = document.getElementById('savingsPercentage');
    
    if (startDateInput) startDateInput.value = appData.currentPeriod.startDate;
    if (endDateInput) endDateInput.value = appData.currentPeriod.endDate;
    if (savingsInput) savingsInput.value = appData.currentPeriod.savingsPercentage;
}

// ==========================================
// –û–ë–ù–û–í–õ–ï–ù–ò–ï –†–ê–°–ß–ï–¢–û–í
// ==========================================

function updateAllCalculations() {
    if (!appData || !appData.currentPeriod) return;
    
    const totalIncome = appData.currentPeriod.incomes.reduce((sum, income) => sum + income.amount, 0);
    const totalFixed = appData.currentPeriod.fixedExpenses.reduce((sum, expense) => sum + expense.amount, 0);
    const totalSavings = totalIncome * appData.currentPeriod.savingsPercentage / 100;
    const totalDailyExpenses = appData.currentPeriod.dailyExpenses.reduce((sum, expense) => sum + expense.amount, 0);
    const totalSpent = totalFixed + totalDailyExpenses;
    const remainingBudget = totalIncome - totalSpent - totalSavings;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç
    const startDate = new Date(appData.currentPeriod.startDate);
    const endDate = new Date(appData.currentPeriod.endDate);
    const totalDays = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1;
    const dailyBudget = remainingBudget / totalDays;
    
    // –¢—Ä–∞—Ç—ã —Å–µ–≥–æ–¥–Ω—è
    const today = new Date().toISOString().split('T')[0];
    const todayExpenses = appData.currentPeriod.dailyExpenses.filter(exp => exp.date === today);
    const todaySpent = todayExpenses.reduce((sum, expense) => sum + expense.amount, 0);
    const todayRemaining = dailyBudget - todaySpent;
    const todayProgress = Math.min((todaySpent / dailyBudget) * 100, 100);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    updateElement('totalIncome', formatCurrency(totalIncome));
    updateElement('totalSpent', formatCurrency(totalSpent));
    updateElement('totalSavings', formatCurrency(totalSavings));
    updateElement('remainingBudget', formatCurrency(remainingBudget));
    updateElement('dailyBudget', formatCurrency(dailyBudget));
    updateElement('todaySpent', formatCurrency(todaySpent));
    updateElement('todayRemaining', formatCurrency(todayRemaining));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã
    const todayProgressBar = document.getElementById('todayProgress');
    if (todayProgressBar) {
        todayProgressBar.style.width = `${todayProgress}%`;
        todayProgressBar.className = `progress-fill ${todayProgress > 100 ? 'error' : todayProgress > 80 ? 'warning' : 'primary'}`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π
    const currentSavings = totalIncome * 0.65 * appData.currentPeriod.savingsPercentage / 100;
    const savingsProgress = (currentSavings / totalSavings) * 100;
    const savingsProgressBar = document.getElementById('savingsProgress');
    if (savingsProgressBar) {
        savingsProgressBar.style.width = `${Math.min(savingsProgress, 100)}%`;
    }
}

// ==========================================
// –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–û–•–û–î–ê–ú–ò
// ==========================================

function addIncome() {
    const titleInput = document.getElementById('incomeTitle');
    const amountInput = document.getElementById('incomeAmount');
    const categorySelect = document.getElementById('incomeCategory');
    
    const title = titleInput.value.trim();
    const amount = parseFloat(amountInput.value);
    const category = categorySelect.value;
    
    if (!title || !amount || amount <= 0) {
        showToast('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É', 'error');
        return;
    }
    
    const newIncome = {
        id: Date.now(),
        name: title,
        amount: amount,
        category: category,
        date: new Date().toISOString().split('T')[0]
    };
    
    appData.currentPeriod.incomes.push(newIncome);
    
    titleInput.value = '';
    amountInput.value = '';
    categorySelect.value = 'work';
    
    renderIncomes();
    updateAllCalculations();
    showToast(`–î–æ—Ö–æ–¥ "${title}" –¥–æ–±–∞–≤–ª–µ–Ω`, 'success');
}

function removeIncome(id) {
    const income = appData.currentPeriod.incomes.find(inc => inc.id === id);
    if (!income) return;
    
    appData.currentPeriod.incomes = appData.currentPeriod.incomes.filter(inc => inc.id !== id);
    
    renderIncomes();
    updateAllCalculations();
    autoSave();
    showToast(`–î–æ—Ö–æ–¥ "${income.name}" —É–¥–∞–ª–µ–Ω`, 'success');
}

function renderIncomes() {
    const container = document.getElementById('incomeList');
    if (!container) return;
    
    if (appData.currentPeriod.incomes.length === 0) {
        container.innerHTML = '<p class="empty-state">–ù–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥</p>';
        return;
    }
    
    container.innerHTML = appData.currentPeriod.incomes.map(income => `
        <div class="income-item">
            <div class="income-info">
                <span class="income-name">${income.name}</span>
                <span class="income-category">${income.category}</span>
            </div>
            <div class="income-actions">
                <span class="income-amount">${formatCurrency(income.amount)}</span>
                <button onclick="removeIncome(${income.id})" class="btn-delete">üóëÔ∏è</button>
            </div>
        </div>
    `).join('');
}

// ==========================================
// –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–°–¢–û–Ø–ù–ù–´–ú–ò –†–ê–°–•–û–î–ê–ú–ò
// ==========================================

function addFixedExpense() {
    const titleInput = document.getElementById('fixedExpenseTitle');
    const amountInput = document.getElementById('fixedExpenseAmount');
    const categorySelect = document.getElementById('fixedExpenseCategory');
    
    const title = titleInput.value.trim();
    const amount = parseFloat(amountInput.value);
    const category = categorySelect.value;
    
    if (!title || !amount || amount <= 0) {
        showToast('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É', 'error');
        return;
    }
    
    const newExpense = {
        id: Date.now(),
        name: title,
        amount: amount,
        category: category,
        date: new Date().toISOString().split('T')[0]
    };
    
    appData.currentPeriod.fixedExpenses.push(newExpense);
    
    titleInput.value = '';
    amountInput.value = '';
    categorySelect.value = 'housing';
    
    renderFixedExpenses();
    updateAllCalculations();
    showToast(`–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ "${title}" –¥–æ–±–∞–≤–ª–µ–Ω`, 'success');
}

function removeFixedExpense(id) {
    const expense = appData.currentPeriod.fixedExpenses.find(exp => exp.id === id);
    if (!expense) return;
    
    appData.currentPeriod.fixedExpenses = appData.currentPeriod.fixedExpenses.filter(exp => exp.id !== id);
    
    renderFixedExpenses();
    updateAllCalculations();
    autoSave();
    showToast(`–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ "${expense.name}" —É–¥–∞–ª–µ–Ω`, 'success');
}

function renderFixedExpenses() {
    const container = document.getElementById('fixedExpenseList');
    if (!container) return;
    
    if (appData.currentPeriod.fixedExpenses.length === 0) {
        container.innerHTML = '<p class="empty-state">–ù–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥</p>';
        return;
    }
    
    container.innerHTML = appData.currentPeriod.fixedExpenses.map(expense => `
        <div class="expense-item">
            <div class="expense-info">
                <span class="expense-name">${expense.name}</span>
                <span class="expense-category">${expense.category}</span>
            </div>
            <div class="expense-actions">
                <span class="expense-amount">${formatCurrency(expense.amount)}</span>
                <button onclick="removeFixedExpense(${expense.id})" class="btn-delete">üóëÔ∏è</button>
            </div>
        </div>
    `).join('');
}

// ==========================================
// –£–ü–†–ê–í–õ–ï–ù–ò–ï –ï–ñ–ï–î–ù–ï–í–ù–´–ú–ò –†–ê–°–•–û–î–ê–ú–ò
// ==========================================

function addDailyExpense() {
    const titleInput = document.getElementById('dailyExpenseTitle');
    const amountInput = document.getElementById('dailyExpenseAmount');
    const categorySelect = document.getElementById('dailyExpenseCategory');
    const dateInput = document.getElementById('dailyExpenseDate');
    
    const title = titleInput.value.trim();
    const amount = parseFloat(amountInput.value);
    const category = categorySelect.value;
    const date = dateInput.value || new Date().toISOString().split('T')[0];
    
    if (!title || !amount || amount <= 0) {
        showToast('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É', 'error');
        return;
    }
    
    const newExpense = {
        id: Date.now(),
        name: title,
        amount: amount,
        category: category,
        date: date
    };
    
    appData.currentPeriod.dailyExpenses.push(newExpense);
    
    titleInput.value = '';
    amountInput.value = '';
    categorySelect.value = 'food';
    dateInput.value = '';
    
    renderDailyExpenses();
    updateAllCalculations();
    showToast(`–†–∞—Å—Ö–æ–¥ "${title}" –¥–æ–±–∞–≤–ª–µ–Ω`, 'success');
}

function removeDailyExpense(id) {
    const expense = appData.currentPeriod.dailyExpenses.find(exp => exp.id === id);
    if (!expense) return;
    
    appData.currentPeriod.dailyExpenses = appData.currentPeriod.dailyExpenses.filter(exp => exp.id !== id);
    
    renderDailyExpenses();
    updateAllCalculations();
    autoSave();
    showToast(`–†–∞—Å—Ö–æ–¥ "${expense.name}" —É–¥–∞–ª–µ–Ω`, 'success');
}

function renderDailyExpenses() {
    const container = document.getElementById('dailyExpenseList');
    if (!container) return;
    
    if (appData.currentPeriod.dailyExpenses.length === 0) {
        container.innerHTML = '<p class="empty-state">–ù–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥</p>';
        return;
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    const sortedExpenses = [...appData.currentPeriod.dailyExpenses].sort((a, b) => 
        new Date(b.date) - new Date(a.date)
    );
    
    container.innerHTML = sortedExpenses.map(expense => {
        const categoryInfo = appData.categories.find(cat => cat.id === expense.category);
        const icon = categoryInfo ? categoryInfo.icon : 'üìã';
        
        return `
            <div class="expense-item">
                <div class="expense-info">
                    <span class="expense-icon">${icon}</span>
                    <div>
                        <span class="expense-name">${expense.name}</span>
                        <span class="expense-date">${formatDate(expense.date)}</span>
                    </div>
                </div>
                <div class="expense-actions">
                    <span class="expense-amount">${formatCurrency(expense.amount)}</span>
                    <button onclick="removeDailyExpense(${expense.id})" class="btn-delete">üóëÔ∏è</button>
                </div>
            </div>
        `;
    }).join('');
}

// ==========================================
// –ê–†–•–ò–í –ü–ï–†–ò–û–î–û–í
// ==========================================

function archiveCurrentPeriod() {
    if (!appData.currentPeriod) return;
    
    if (appData.currentPeriod.incomes.length === 0 && 
        appData.currentPeriod.fixedExpenses.length === 0 && 
        appData.currentPeriod.dailyExpenses.length === 0) {
        showToast('–ù–µ–ª—å–∑—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—É—Å—Ç–æ–π –ø–µ—Ä–∏–æ–¥', 'warning');
        return;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const totalIncome = appData.currentPeriod.incomes.reduce((sum, inc) => sum + inc.amount, 0);
    const totalExpenses = appData.currentPeriod.fixedExpenses.reduce((sum, exp) => sum + exp.amount, 0) +
                          appData.currentPeriod.dailyExpenses.reduce((sum, exp) => sum + exp.amount, 0);
    const savings = totalIncome * appData.currentPeriod.savingsPercentage / 100;
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categorySpending = {};
    appData.currentPeriod.dailyExpenses.forEach(exp => {
        if (!categorySpending[exp.category]) {
            categorySpending[exp.category] = 0;
        }
        categorySpending[exp.category] += exp.amount;
    });
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∞—Ä—Ö–∏–≤–µ
    const archivedPeriod = {
        id: appData.currentPeriod.id,
        title: appData.currentPeriod.title,
        totalIncome: totalIncome,
        totalExpenses: totalExpenses,
        savings: savings,
        categorySpending: categorySpending,
        startDate: appData.currentPeriod.startDate,
        endDate: appData.currentPeriod.endDate
    };
    
    appData.historicalData.unshift(archivedPeriod);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥
    appData.currentPeriod = getDefaultAppData().currentPeriod;
    appData.currentPeriod.incomes = makeArrayObservable([]);
    appData.currentPeriod.fixedExpenses = makeArrayObservable([]);
    appData.currentPeriod.dailyExpenses = makeArrayObservable([]);
    
    autoSave();
    loadInitialData();
    updateAllCalculations();
    renderArchive();
    
    showToast('–ü–µ—Ä–∏–æ–¥ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥', 'success');
}

function renderArchive() {
    const container = document.getElementById('archiveList');
    if (!container) return;
    
    if (!appData.historicalData || appData.historicalData.length === 0) {
        container.innerHTML = '<p class="empty-state">–ù–µ—Ç –∞—Ä—Ö–∏–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤</p>';
        return;
    }
    
    container.innerHTML = appData.historicalData.map(period => `
        <div class="archive-item">
            <h3>${period.title}</h3>
            <div class="archive-stats">
                <div class="stat">
                    <span class="stat-label">–î–æ—Ö–æ–¥:</span>
                    <span class="stat-value">${formatCurrency(period.totalIncome)}</span>
                </div>
                <div class="stat">
                    <span class="stat-label">–†–∞—Å—Ö–æ–¥:</span>
                    <span class="stat-value">${formatCurrency(period.totalExpenses)}</span>
                </div>
                <div class="stat">
                    <span class="stat-label">–°–±–µ—Ä–µ–∂–µ–Ω–∏—è:</span>
                    <span class="stat-value">${formatCurrency(period.savings)}</span>
                </div>
            </div>
        </div>
    `).join('');
}

// ==========================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ==========================================

function updateElement(id, value) {
    const element = document.getElementById(id);
    if (element) {
        element.textContent = value;
    }
}

function formatCurrency(amount) {
    return new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: 'RUB',
        minimumFractionDigits: 0
    }).format(amount);
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'short'
    });
}

function showToast(message, type = 'info') {
    console.log(`[${type.toUpperCase()}] ${message}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram
    if (tg.showPopup) {
        tg.showPopup({
            title: type === 'success' ? '‚úÖ –£—Å–ø–µ—Ö' : type === 'error' ? '‚ùå –û—à–∏–±–∫–∞' : '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            message: message
        });
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ: —Å–æ–∑–¥–∞–µ–º —Å–≤–æ–π toast
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.classList.add('show');
    }, 10);
    
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => {
            document.body.removeChild(toast);
        }, 300);
    }, 3000);
}

// ==========================================
// –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–¶–ï–ù–¢–ê –°–ë–ï–†–ï–ñ–ï–ù–ò–ô
// ==========================================

function updateSavingsPercentage() {
    const input = document.getElementById('savingsPercentage');
    if (!input) return;
    
    const value = parseInt(input.value);
    if (value >= 0 && value <= 100) {
        appData.currentPeriod.savingsPercentage = value;
        updateAllCalculations();
        autoSave();
        showToast(`–ü—Ä–æ—Ü–µ–Ω—Ç —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${value}%`, 'success');
    }
}

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initializeCharts() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤...');
}

function updateCharts() {
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤...');
}

function initializeCalendarHeatmap() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–π —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã...');
}
