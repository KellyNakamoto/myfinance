// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô app.js - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –° –£–°–¢–†–ê–ù–ï–ù–ò–ï–ú –í–°–ï–• –ü–†–û–ë–õ–ï–ú
// =============================================================================================================

// ============================================= 
// DEBOUNCE –§–£–ù–ö–¶–ò–Ø
// =============================================
function debounce(func, wait) {
    let timeout;
    const debounced = function executedFunction(...args) {
        const later = () => {
            timeout = null;
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
    debounced.cancel = function() {
        clearTimeout(timeout);
        timeout = null;
    };
    debounced.flush = function(...args) {
        clearTimeout(timeout);
        timeout = null;
        func(...args);
    };
    return debounced;
}

// –°–æ–∑–¥–∞–µ–º debounced –≤–µ—Ä—Å–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π
const debouncedSave = debounce(saveAllData, 500);
const debouncedCalculations = debounce(updateAllCalculations, 300);

// ============================================= 
// –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
// =============================================
let appData = {
    currentPeriod: {
        id: "2025_10",
        title: "–û–∫—Ç—è–±—Ä—å 2025",
        startDate: "2025-10-01",
        endDate: "2025-10-31",
        incomes: [],
        fixedExpenses: [],
        savingsPercentage: 20,
        dailyExpenses: [],
        dailyBudgetCarryover: {} // –ù–û–í–û–ï: –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ –ø–æ –¥–Ω—è–º
    },
    categories: [
        {id: "food", name: "–ï–¥–∞", icon: "üçΩÔ∏è", keywords: ["–∫–∞—Ñ–µ", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–ø—Ä–æ–¥—É–∫—Ç—ã", "–µ–¥–∞", "–æ–±–µ–¥", "–∑–∞–≤—Ç—Ä–∞–∫", "—É–∂–∏–Ω", "–∫–æ—Ñ–µ"]},
        {id: "transport", name: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", icon: "üöó", keywords: ["—Ç–∞–∫—Å–∏", "–∞–≤—Ç–æ–±—É—Å", "–º–µ—Ç—Ä–æ", "–±–µ–Ω–∑–∏–Ω", "–ø–∞—Ä–∫–æ–≤–∫–∞"]},
        {id: "entertainment", name: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", icon: "üé¨", keywords: ["–∫–∏–Ω–æ", "–∫–æ–Ω—Ü–µ—Ä—Ç", "–∏–≥—Ä—ã", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"]},
        {id: "shopping", name: "–ü–æ–∫—É–ø–∫–∏", icon: "üõçÔ∏è", keywords: ["–æ–¥–µ–∂–¥–∞", "–æ–±—É–≤—å", "—Ç–µ—Ö–Ω–∏–∫–∞", "–ø–æ–∫—É–ø–∫–∏"]},
        {id: "health", name: "–ó–¥–æ—Ä–æ–≤—å–µ", icon: "‚öïÔ∏è", keywords: ["–≤—Ä–∞—á", "–ª–µ–∫–∞—Ä—Å—Ç–≤–∞", "–∞–ø—Ç–µ–∫–∞"]},
        {id: "other", name: "–ü—Ä–æ—á–µ–µ", icon: "üìã", keywords: []}
    ]
};

let editingState = {
    mode: null,
    itemId: null,
    originalData: null
};

let lastScrollY = window.scrollY;
let ticking = false;
let tg = null;

// ============================================= 
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –ò –ó–ê–ì–†–£–ó–ö–ò –° TELEGRAM CLOUD STORAGE
// =============================================

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram Cloud Storage
function isTelegramCloudAvailable() {
    return window.Telegram?.WebApp?.CloudStorage?.setItem && 
           window.Telegram?.WebApp?.CloudStorage?.getItem;
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Telegram Cloud Storage)
function saveToStorage(key, data) {
    try {
        if (!data) {
            console.warn(`–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ ${key}`);
            return false;
        }

        const jsonString = JSON.stringify(data);

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç Telegram Cloud Storage –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if (isTelegramCloudAvailable()) {
            window.Telegram.WebApp.CloudStorage.setItem(key, jsonString, (error) => {
                if (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Telegram Cloud ${key}:`, error);
                    // Fallback –Ω–∞ localStorage
                    try {
                        localStorage.setItem(key, jsonString);
                        console.log(`‚úÖ Fallback —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage ${key}`);
                    } catch (e) {
                        console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${key}:`, e);
                    }
                } else {
                    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Telegram Cloud ${key}`);
                    // –î—É–±–ª–∏—Ä—É–µ–º –≤ localStorage –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                    try {
                        localStorage.setItem(key, jsonString);
                    } catch (e) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ localStorage –µ—Å–ª–∏ –µ—Å—Ç—å Cloud Storage
                    }
                }
            });
            return true;
        } else {
            // Fallback –Ω–∞ localStorage
            localStorage.setItem(key, jsonString);
            console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ localStorage ${key}`);
            return true;
        }
    } catch (e) {
        console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${key}:`, e);
        return false;
    }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Telegram Cloud Storage)
function loadFromStorage(key, defaultValue = null) {
    return new Promise((resolve) => {
        try {
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç Telegram Cloud Storage –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if (isTelegramCloudAvailable()) {
                window.Telegram.WebApp.CloudStorage.getItem(key, (error, value) => {
                    if (error || !value) {
                        console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Telegram Cloud ${key}, –ø—Ä–æ–±—É–µ–º localStorage`);
                        // Fallback –Ω–∞ localStorage
                        try {
                            const localValue = localStorage.getItem(key);
                            if (localValue) {
                                const parsed = JSON.parse(localValue);
                                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ localStorage ${key}`);
                                resolve(parsed);
                            } else {
                                resolve(defaultValue);
                            }
                        } catch (e) {
                            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage ${key}:`, e);
                            resolve(defaultValue);
                        }
                    } else {
                        try {
                            const parsed = JSON.parse(value);
                            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ Telegram Cloud ${key}`);
                            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å localStorage
                            try {
                                localStorage.setItem(key, value);
                            } catch (e) {
                                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ localStorage
                            }
                            resolve(parsed);
                        } catch (e) {
                            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ Telegram Cloud ${key}:`, e);
                            resolve(defaultValue);
                        }
                    }
                });
            } else {
                // Fallback –Ω–∞ localStorage
                const saved = localStorage.getItem(key);
                if (!saved) {
                    resolve(defaultValue);
                } else {
                    const parsed = JSON.parse(saved);
                    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ localStorage ${key}`);
                    resolve(parsed);
                }
            }
        } catch (e) {
            console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${key}:`, e);
            resolve(defaultValue);
        }
    });
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
function saveAllData() {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');

    const periodData = {
        id: appData.currentPeriod.id,
        title: appData.currentPeriod.title,
        startDate: appData.currentPeriod.startDate,
        endDate: appData.currentPeriod.endDate,
        savingsPercentage: appData.currentPeriod.savingsPercentage,
        dailyBudgetCarryover: appData.currentPeriod.dailyBudgetCarryover || {}
    };

    saveToStorage('appData_currentPeriod', periodData);
    saveToStorage('appData_incomes', appData.currentPeriod.incomes);
    saveToStorage('appData_fixedExpenses', appData.currentPeriod.fixedExpenses);
    saveToStorage('appData_dailyExpenses', appData.currentPeriod.dailyExpenses);
    saveToStorage('appData_savingsPercentage', appData.currentPeriod.savingsPercentage);
    saveToStorage('appData_startDate', appData.currentPeriod.startDate);
    saveToStorage('appData_endDate', appData.currentPeriod.endDate);
    saveToStorage('appData_dailyBudgetCarryover', appData.currentPeriod.dailyBudgetCarryover || {});

    console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    return true;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
async function loadAllSavedData() {
    console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

    try {
        const [
            savedAppData,
            savedIncomes,
            savedFixedExpenses,
            savedDailyExpenses,
            savedSavingsPercentage,
            savedStartDate,
            savedEndDate,
            savedDailyBudgetCarryover
        ] = await Promise.all([
            loadFromStorage('appData_currentPeriod'),
            loadFromStorage('appData_incomes', []),
            loadFromStorage('appData_fixedExpenses', []),
            loadFromStorage('appData_dailyExpenses', []),
            loadFromStorage('appData_savingsPercentage'),
            loadFromStorage('appData_startDate'),
            loadFromStorage('appData_endDate'),
            loadFromStorage('appData_dailyBudgetCarryover', {})
        ]);

        if (savedAppData) {
            appData.currentPeriod = { ...appData.currentPeriod, ...savedAppData };
        }

        if (Array.isArray(savedIncomes)) {
            appData.currentPeriod.incomes = savedIncomes;
        }

        if (Array.isArray(savedFixedExpenses)) {
            appData.currentPeriod.fixedExpenses = savedFixedExpenses;
        }

        if (Array.isArray(savedDailyExpenses)) {
            appData.currentPeriod.dailyExpenses = savedDailyExpenses;
        }

        if (savedSavingsPercentage !== null) {
            appData.currentPeriod.savingsPercentage = parseInt(savedSavingsPercentage);
        }

        if (savedStartDate) {
            appData.currentPeriod.startDate = savedStartDate;
        }

        if (savedEndDate) {
            appData.currentPeriod.endDate = savedEndDate;
        }

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ –æ—Å—Ç–∞—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞
        if (savedDailyBudgetCarryover && typeof savedDailyBudgetCarryover === 'object') {
            appData.currentPeriod.dailyBudgetCarryover = savedDailyBudgetCarryover;
        }

        console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// ============================================= 
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–ï–†–ò–û–î–û–ú –ò –ü–†–û–¶–ï–ù–¢–û–ú –°–ë–ï–†–ï–ñ–ï–ù–ò–ô
// =============================================

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
function savePlanningPeriod() {
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');

    let hasChanges = false;

    if (startDateInput && startDateInput.value) {
        const newStartDate = startDateInput.value;
        if (newStartDate !== appData.currentPeriod.startDate) {
            appData.currentPeriod.startDate = newStartDate;
            hasChanges = true;
            console.log(`‚úÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${newStartDate}`);
        }
    }

    if (endDateInput && endDateInput.value) {
        const newEndDate = endDateInput.value;
        if (newEndDate !== appData.currentPeriod.endDate) {
            appData.currentPeriod.endDate = newEndDate;
            hasChanges = true;
            console.log(`‚úÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${newEndDate}`);
        }
    }

    if (hasChanges) {
        updatePeriodTitle();
        updateAllCalculations();
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
        saveToStorage('appData_startDate', appData.currentPeriod.startDate);
        saveToStorage('appData_endDate', appData.currentPeriod.endDate);
        saveToStorage('appData_currentPeriod', {
            id: appData.currentPeriod.id,
            title: appData.currentPeriod.title,
            startDate: appData.currentPeriod.startDate,
            endDate: appData.currentPeriod.endDate,
            savingsPercentage: appData.currentPeriod.savingsPercentage
        });
        showToastNotification('–ü–µ—Ä–∏–æ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω', 'success');
    }
}

function updatePeriodTitle() {
    try {
        const startDate = new Date(appData.currentPeriod.startDate);
        const month = startDate.toLocaleString('ru-RU', { month: 'long' });
        const year = startDate.getFullYear();
        appData.currentPeriod.title = `${month.charAt(0).toUpperCase() + month.slice(1)} ${year}`;

        const periodBtn = document.querySelector('.current-period');
        if (periodBtn) {
            periodBtn.textContent = appData.currentPeriod.title;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∞:', error);
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –£–ª—É—á—à–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π
function updateSavingsPercentage(value) {
    const display = document.getElementById('savingsPercentageDisplay');
    if (display) {
        display.textContent = value;
    }

    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const tempPercentage = appData.currentPeriod.savingsPercentage;
    appData.currentPeriod.savingsPercentage = parseInt(value);
    updateAllCalculations();
    appData.currentPeriod.savingsPercentage = tempPercentage; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
}

function saveSavingsPercentage(value) {
    const newValue = parseInt(value);
    if (newValue !== appData.currentPeriod.savingsPercentage) {
        appData.currentPeriod.savingsPercentage = newValue;
        console.log(`‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${newValue}%`);

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π
        saveToStorage('appData_savingsPercentage', newValue);
        saveToStorage('appData_currentPeriod', {
            id: appData.currentPeriod.id,
            title: appData.currentPeriod.title,
            startDate: appData.currentPeriod.startDate,
            endDate: appData.currentPeriod.endDate,
            savingsPercentage: newValue
        });

        updateAllCalculations();
        showToastNotification(`–ü—Ä–æ—Ü–µ–Ω—Ç —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π: ${newValue}%`, 'success');
    }
}

// ============================================= 
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ï–ñ–ï–î–ù–ï–í–ù–´–ú–ò –¢–†–ê–¢–ê–ú–ò
// =============================================

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ç—Ä–∞—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã
function editDailyExpense(id) {
    const expense = appData.currentPeriod.dailyExpenses.find(exp => exp.id === id);
    if (!expense) return;

    editingState.mode = 'dailyExpense';
    editingState.itemId = id;
    editingState.originalData = { ...expense };

    const titleInput = document.getElementById('dailyExpenseTitle');
    const amountInput = document.getElementById('dailyExpenseAmount');
    const categorySelect = document.getElementById('dailyExpenseCategory');
    const dateInput = document.getElementById('dailyExpenseDate'); // –ù–û–í–û–ï: –ø–æ–ª–µ –¥–ª—è –¥–∞—Ç—ã

    if (titleInput) titleInput.value = expense.name;
    if (amountInput) amountInput.value = expense.amount;
    if (categorySelect) categorySelect.value = expense.category;
    if (dateInput) dateInput.value = expense.date; // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É

    const button = document.querySelector('[onclick="addDailyExpense()"]');
    if (button) button.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';

    if (titleInput) {
        titleInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
        titleInput.focus();
    }

    showToastNotification('–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–µ–Ω', 'info');
}

function addDailyExpense() {
    const titleInput = document.getElementById('dailyExpenseTitle');
    const amountInput = document.getElementById('dailyExpenseAmount');
    const categorySelect = document.getElementById('dailyExpenseCategory');
    const dateInput = document.getElementById('dailyExpenseDate'); // –ù–û–í–û–ï: –ø–æ–ª–µ –¥–ª—è –¥–∞—Ç—ã

    if (!titleInput || !amountInput || !categorySelect) return;

    const title = titleInput.value.trim();
    const amount = parseFloat(amountInput.value);
    const category = categorySelect.value;
    const expenseDate = dateInput ? dateInput.value : new Date().toISOString().split('T')[0]; // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3

    if (!title || !amount || amount <= 0) {
        showToastNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'warning');
        return;
    }

    if (editingState.mode === 'dailyExpense' && editingState.itemId) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–∞—Ç—ã
        const expenseIndex = appData.currentPeriod.dailyExpenses.findIndex(exp => exp.id === editingState.itemId);
        if (expenseIndex !== -1) {
            appData.currentPeriod.dailyExpenses[expenseIndex] = {
                ...appData.currentPeriod.dailyExpenses[expenseIndex],
                name: title,
                amount: amount,
                category: category,
                date: expenseDate // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é –¥–∞—Ç—É
            };
        }

        cancelEdit();
        const button = document.querySelector('[onclick="addDailyExpense()"]');
        if (button) button.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É';
        showToastNotification('–¢—Ä–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success');
    } else {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞—Ç—ã
        const newExpense = {
            id: Date.now(),
            name: title,
            amount: amount,
            category: category,
            date: expenseDate // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3
        };
        appData.currentPeriod.dailyExpenses.push(newExpense);
        showToastNotification('–¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success');
    }

    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
    titleInput.value = '';
    amountInput.value = '';
    categorySelect.value = 'food';
    if (dateInput) dateInput.value = new Date().toISOString().split('T')[0];

    debouncedSave();
    renderDailyExpenses();
    renderRecentTransactions();
    updateAllCalculations();
}

// ============================================= 
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –†–ê–°–ß–ï–¢ –ë–Æ–î–ñ–ï–¢–ê –° –°–ê–õ–¨–î–û (–ü–ï–†–ï–ù–û–° –û–°–¢–ê–¢–ö–ê)
// =============================================

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º —Å–∞–ª—å–¥–æ
function calculateDailyBudgetWithCarryover(targetDate = null) {
    if (!targetDate) {
        targetDate = new Date().toISOString().split('T')[0];
    }

    const totalIncome = appData.currentPeriod.incomes.reduce((sum, income) => sum + (parseFloat(income.amount) || 0), 0);
    const totalFixed = appData.currentPeriod.fixedExpenses.reduce((sum, expense) => sum + (parseFloat(expense.amount) || 0), 0);
    const savingsPercentage = parseFloat(appData.currentPeriod.savingsPercentage) || 0;
    const totalSavings = (totalIncome * savingsPercentage) / 100;

    const availableForDaily = totalIncome - totalFixed - totalSavings;

    try {
        const startDate = new Date(appData.currentPeriod.startDate);
        const endDate = new Date(appData.currentPeriod.endDate);
        const totalDays = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)) + 1;

        if (totalDays <= 0 || availableForDaily <= 0) {
            return { dailyBudget: 0, todayBudget: 0, carryover: 0 };
        }

        const baseDailyBudget = availableForDaily / totalDays;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –†–∞—Å—á–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ (—Å–∞–ª—å–¥–æ)
        let carryoverAmount = 0;
        const today = new Date(targetDate);
        const periodStart = new Date(appData.currentPeriod.startDate);

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –¥–Ω—è–º –æ—Ç –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–æ —Å–µ–≥–æ–¥–Ω—è
        for (let d = new Date(periodStart); d < today; d.setDate(d.getDate() + 1)) {
            const dayStr = d.toISOString().split('T')[0];
            const dayExpenses = appData.currentPeriod.dailyExpenses
                .filter(exp => exp.date === dayStr)
                .reduce((sum, exp) => sum + (parseFloat(exp.amount) || 0), 0);

            const dayBudget = baseDailyBudget + (appData.currentPeriod.dailyBudgetCarryover[dayStr] || 0);
            const dayRemainder = dayBudget - dayExpenses;

            if (dayRemainder > 0) {
                carryoverAmount += dayRemainder;
            }
            // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        }

        // –ë—é–¥–∂–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è = –±–∞–∑–æ–≤—ã–π –±—é–¥–∂–µ—Ç + –ø–µ—Ä–µ–Ω–æ—Å
        const todayBudget = baseDailyBudget + carryoverAmount;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        if (!appData.currentPeriod.dailyBudgetCarryover) {
            appData.currentPeriod.dailyBudgetCarryover = {};
        }
        appData.currentPeriod.dailyBudgetCarryover[targetDate] = carryoverAmount;

        return {
            dailyBudget: baseDailyBudget,
            todayBudget: todayBudget,
            carryover: carryoverAmount
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞:', error);
        return { dailyBudget: 0, todayBudget: 0, carryover: 0 };
    }
}

// ============================================= 
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø (–§–ò–ö–°–ê–¶–ò–Ø –ü–ê–ù–ï–õ–ò)
// =============================================

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 5: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
function initializeHeaderScroll() {
    const header = document.getElementById('compactHeader');
    const navigation = document.getElementById('tabNavigation');

    if (!header || !navigation) return;

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 5: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è –¥–ª—è Telegram WebApp
    if (window.Telegram?.WebApp) {
        console.log('ü§ñ Telegram WebApp - —Ñ–∏–∫—Å–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é');
        header.style.cssText = `
            position: fixed !important;
            top: 0 !important;
            left: 0 !important;
            right: 0 !important;
            transform: translateY(0) !important;
            z-index: 1000 !important;
            transition: none !important;
        `;
        navigation.style.cssText = `
            position: fixed !important;
            top: 60px !important;
            left: 0 !important;
            right: 0 !important;
            transform: translateY(0) !important;
            z-index: 999 !important;
            transition: none !important;
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è body —á—Ç–æ–±—ã –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–ª—Å—è
        document.body.style.paddingTop = '120px';
        return;
    }

    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫—Ä—ã—Ç–∏—è/–ø–æ–∫–∞–∑–∞
    let isHidden = false;
    const HIDE_THRESHOLD = 100;
    const DELTA_THRESHOLD = 5;

    function updateHeaderVisibility() {
        const currentScrollY = window.scrollY;
        const delta = currentScrollY - lastScrollY;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –µ—Å–ª–∏ —Å–∫—Ä–æ–ª–ª–∏–º –≤–≤–µ—Ä—Ö –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (currentScrollY < HIDE_THRESHOLD || delta < -DELTA_THRESHOLD) {
            if (isHidden) {
                header.style.transform = 'translateY(0)';
                navigation.style.transform = 'translateY(0)';
                isHidden = false;
            }
        }
        // –°–∫—Ä—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –µ—Å–ª–∏ —Å–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑ –±—ã—Å—Ç—Ä–æ
        else if (delta > DELTA_THRESHOLD && currentScrollY > HIDE_THRESHOLD) {
            if (!isHidden) {
                header.style.transform = 'translateY(-100%)';
                navigation.style.transform = 'translateY(-100%)';
                isHidden = true;
            }
        }

        lastScrollY = currentScrollY;
        ticking = false;
    }

    function requestTick() {
        if (!ticking) {
            requestAnimationFrame(updateHeaderVisibility);
            ticking = true;
        }
    }

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞
    window.addEventListener('scroll', requestTick, { passive: true });

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', () => {
        header.style.transform = 'translateY(0)';
        navigation.style.transform = 'translateY(0)';
        isHidden = false;
    }, { passive: true });
}

// ============================================= 
// –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –†–ê–°–ß–ï–¢–û–í
// =============================================

function updateAllCalculations() {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–≤...');

    const totalIncome = appData.currentPeriod.incomes.reduce((sum, income) => sum + (parseFloat(income.amount) || 0), 0);
    const totalFixed = appData.currentPeriod.fixedExpenses.reduce((sum, expense) => sum + (parseFloat(expense.amount) || 0), 0);
    const savingsPercentage = parseFloat(appData.currentPeriod.savingsPercentage) || 0;
    const totalSavings = (totalIncome * savingsPercentage) / 100;
    const totalDailyExpenses = appData.currentPeriod.dailyExpenses.reduce((sum, expense) => sum + (parseFloat(expense.amount) || 0), 0);
    const totalSpent = totalFixed + totalDailyExpenses;
    const remainingBudget = totalIncome - totalSpent - totalSavings;

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ —Å —Å–∞–ª—å–¥–æ
    const budgetInfo = calculateDailyBudgetWithCarryover();

    // –°—á–∏—Ç–∞–µ–º —Ç—Ä–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const today = new Date().toISOString().split('T')[0];
    const todayExpenses = appData.currentPeriod.dailyExpenses.filter(exp => exp.date === today);
    const todaySpent = todayExpenses.reduce((sum, expense) => sum + (parseFloat(expense.amount) || 0), 0);
    const todayRemaining = Math.max(budgetInfo.todayBudget - todaySpent, 0);

    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateElement('totalIncome', formatCurrency(totalIncome));
    updateElement('totalSpent', formatCurrency(totalSpent));
    updateElement('totalSavings', formatCurrency(totalSavings));
    updateElement('remainingBudget', formatCurrency(remainingBudget));
    updateElement('dailyBudget', formatCurrency(budgetInfo.todayBudget)); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—é–¥–∂–µ—Ç —Å —Å–∞–ª—å–¥–æ
    updateElement('todaySpent', formatCurrency(todaySpent));
    updateElement('todayRemaining', formatCurrency(todayRemaining));

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    updateBudgetProgress(todaySpent, budgetInfo.todayBudget);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –æ—Å—Ç–∞—Ç–∫–∞
    if (budgetInfo.carryover > 0) {
        const carryoverElement = document.getElementById('budgetCarryover');
        if (carryoverElement) {
            carryoverElement.textContent = `+ ${formatCurrency(budgetInfo.carryover)} –ø–µ—Ä–µ–Ω–æ—Å`;
            carryoverElement.style.display = 'block';
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π
    let savingsProgress = 0;
    let currentSavings = 0;
    if (totalIncome > 0 && savingsPercentage > 0) {
        const monthProgress = 0.65; // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –º–µ—Å—è—Ü–∞
        currentSavings = totalSavings * monthProgress;
        savingsProgress = totalSavings > 0 ? (currentSavings / totalSavings) * 100 : 0;
    }

    const savingsProgressBar = document.getElementById('savingsProgress');
    if (savingsProgressBar) {
        savingsProgressBar.style.width = `${Math.min(savingsProgress, 100)}%`;
    }

    updateElement('savingsGoal', formatCurrency(totalSavings));
    updateElement('savingsProgressText', `${formatCurrency(currentSavings)} –∏–∑ ${formatCurrency(totalSavings)}`);

    console.log('‚úÖ –†–∞—Å—á–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –¥–æ–±–∞–≤–ª—é key functions –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

function updateElement(id, value) {
    const element = document.getElementById(id);
    if (element) {
        element.textContent = value;
    }
}

function formatCurrency(amount) {
    return new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: 'RUB',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
    }).format(amount || 0);
}

function showToastNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const toast = document.createElement('div');
    toast.className = `toast toast--${type}`;
    toast.textContent = message;
    toast.style.cssText = `
        position: fixed;
        top: 80px;
        right: 16px;
        background: var(--color-surface);
        border: 1px solid var(--color-border);
        border-radius: var(--radius-base);
        padding: 12px 16px;
        font-size: 14px;
        z-index: 9999;
        opacity: 0;
        transform: translateX(100%);
        transition: all 0.3s ease;
    `;

    document.body.appendChild(toast);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        toast.style.opacity = '1';
        toast.style.transform = 'translateX(0)';
    }, 100);

    // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ
    setTimeout(() => {
        toast.style.opacity = '0';
        toast.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 300);
    }, 3000);
}

// ============================================= 
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
// =============================================

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Å–æ–∫—Ä–∞—â–µ–Ω–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)
function cancelEdit() {
    editingState.mode = null;
    editingState.itemId = null;
    editingState.originalData = null;
}

function updateBudgetProgress(spentAmount, totalBudget) {
    const progressRing = document.getElementById('budgetProgressRing');
    if (!progressRing) return;

    let progress = 0;
    if (totalBudget > 0) {
        progress = Math.min((spentAmount / totalBudget) * 100, 100);
    }

    let color = 'var(--color-primary)';
    if (progress > 100) {
        color = 'var(--color-error)';
    } else if (progress > 80) {
        color = 'var(--color-warning)';
    }

    const circumference = 2 * Math.PI * 50;
    const offset = circumference - (progress / 100) * circumference;

    progressRing.innerHTML = `
        <svg width="120" height="120" class="progress-ring">
            <circle cx="60" cy="60" r="50" stroke="var(--color-border)" stroke-width="8" fill="transparent"/>
            <circle cx="60" cy="60" r="50" stroke="${color}" stroke-width="8" fill="transparent"
                    stroke-dasharray="${circumference}" stroke-dashoffset="${offset}" 
                    style="transition: stroke-dashoffset 0.5s ease-in-out;"/>
        </svg>
    `;
}

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞–º–∏ –∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)
function addIncome() {
    const titleInput = document.getElementById('incomeTitle');
    const amountInput = document.getElementById('incomeAmount');
    const categorySelect = document.getElementById('incomeCategory');

    if (!titleInput || !amountInput || !categorySelect) return;

    const title = titleInput.value.trim();
    const amount = parseFloat(amountInput.value);
    const category = categorySelect.value;

    if (!title || !amount || amount <= 0) {
        showToastNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'warning');
        return;
    }

    if (editingState.mode === 'income' && editingState.itemId) {
        const incomeIndex = appData.currentPeriod.incomes.findIndex(inc => inc.id === editingState.itemId);
        if (incomeIndex !== -1) {
            appData.currentPeriod.incomes[incomeIndex] = {
                ...appData.currentPeriod.incomes[incomeIndex],
                name: title,
                amount: amount,
                category: category
            };
        }
        cancelEdit();
        showToastNotification('–î–æ—Ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
    } else {
        const newIncome = {
            id: Date.now(),
            name: title,
            amount: amount,
            category: category,
            date: new Date().toISOString().split('T')[0]
        };
        appData.currentPeriod.incomes.push(newIncome);
        showToastNotification('–î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
    }

    titleInput.value = '';
    amountInput.value = '';
    categorySelect.value = 'work';

    debouncedSave();
    renderIncomes();
    renderRecentTransactions();
    updateAllCalculations();
}

function removeIncome(id) {
    const income = appData.currentPeriod.incomes.find(inc => inc.id === id);
    if (!income) return;

    appData.currentPeriod.incomes = appData.currentPeriod.incomes.filter(inc => inc.id !== id);
    debouncedSave();
    renderIncomes();
    updateAllCalculations();
    showToastNotification(`–î–æ—Ö–æ–¥ "${income.name}" —É–¥–∞–ª–µ–Ω`, 'info');
}

function editIncome(id) {
    const income = appData.currentPeriod.incomes.find(inc => inc.id === id);
    if (!income) return;

    editingState.mode = 'income';
    editingState.itemId = id;
    editingState.originalData = { ...income };

    const titleInput = document.getElementById('incomeTitle');
    const amountInput = document.getElementById('incomeAmount');
    const categorySelect = document.getElementById('incomeCategory');

    if (titleInput) titleInput.value = income.name;
    if (amountInput) amountInput.value = income.amount;
    if (categorySelect) categorySelect.value = income.category;

    if (titleInput) {
        titleInput.focus();
    }
}

// –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤...
function addFixedExpense() {
    const titleInput = document.getElementById('fixedExpenseTitle');
    const amountInput = document.getElementById('fixedExpenseAmount');
    const categorySelect = document.getElementById('fixedExpenseCategory');

    if (!titleInput || !amountInput || !categorySelect) return;

    const title = titleInput.value.trim();
    const amount = parseFloat(amountInput.value);
    const category = categorySelect.value;

    if (!title || !amount || amount <= 0) {
        showToastNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'warning');
        return;
    }

    const newExpense = {
        id: Date.now(),
        name: title,
        amount: amount,
        category: category,
        date: new Date().toISOString().split('T')[0]
    };

    appData.currentPeriod.fixedExpenses.push(newExpense);
    showToastNotification('–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω', 'success');

    titleInput.value = '';
    amountInput.value = '';
    categorySelect.value = 'housing';

    debouncedSave();
    renderFixedExpenses();
    renderRecentTransactions();
    updateAllCalculations();
}

function removeFixedExpense(id) {
    const expense = appData.currentPeriod.fixedExpenses.find(exp => exp.id === id);
    if (!expense) return;

    appData.currentPeriod.fixedExpenses = appData.currentPeriod.fixedExpenses.filter(exp => exp.id !== id);
    debouncedSave();
    renderFixedExpenses();
    updateAllCalculations();
    showToastNotification(`–†–∞—Å—Ö–æ–¥ "${expense.name}" —É–¥–∞–ª–µ–Ω`, 'info');
}

function removeDailyExpense(id) {
    const expense = appData.currentPeriod.dailyExpenses.find(exp => exp.id === id);
    if (!expense) return;

    appData.currentPeriod.dailyExpenses = appData.currentPeriod.dailyExpenses.filter(exp => exp.id !== id);
    debouncedSave();
    renderDailyExpenses();
    updateAllCalculations();
    showToastNotification(`–¢—Ä–∞—Ç–∞ "${expense.name}" —É–¥–∞–ª–µ–Ω–∞`, 'info');
}

// –§—É–Ω–∫—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
function renderIncomes() {
    const container = document.getElementById('incomeList');
    if (!container) return;

    if (appData.currentPeriod.incomes.length === 0) {
        container.innerHTML = '<p class="empty-state">–î–æ—Ö–æ–¥—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</p>';
        return;
    }

    container.innerHTML = appData.currentPeriod.incomes.map(income => `
        <div class="item-card">
            <div class="item-info">
                <div class="item-name">${income.name}</div>
                <div class="item-amount">${formatCurrency(income.amount)}</div>
            </div>
            <div class="item-actions">
                <button onclick="editIncome(${income.id})" class="btn btn--sm btn--outline">‚úèÔ∏è</button>
                <button onclick="removeIncome(${income.id})" class="btn btn--sm btn--outline">üóëÔ∏è</button>
            </div>
        </div>
    `).join('');
}

function renderFixedExpenses() {
    const container = document.getElementById('fixedExpenseList');
    if (!container) return;

    if (appData.currentPeriod.fixedExpenses.length === 0) {
        container.innerHTML = '<p class="empty-state">–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</p>';
        return;
    }

    container.innerHTML = appData.currentPeriod.fixedExpenses.map(expense => `
        <div class="item-card">
            <div class="item-info">
                <div class="item-name">${expense.name}</div>
                <div class="item-amount">${formatCurrency(expense.amount)}</div>
            </div>
            <div class="item-actions">
                <button onclick="removeFixedExpense(${expense.id})" class="btn btn--sm btn--outline">üóëÔ∏è</button>
            </div>
        </div>
    `).join('');
}

function renderDailyExpenses() {
    const container = document.getElementById('dailyExpensesList');
    if (!container) return;

    if (appData.currentPeriod.dailyExpenses.length === 0) {
        container.innerHTML = '<p class="empty-state">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ç—Ä–∞—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</p>';
        return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    const sortedExpenses = [...appData.currentPeriod.dailyExpenses].sort((a, b) => new Date(b.date) - new Date(a.date));

    container.innerHTML = sortedExpenses.map(expense => {
        const category = appData.categories.find(cat => cat.id === expense.category) || appData.categories.find(cat => cat.id === 'other');
        const dateStr = new Date(expense.date).toLocaleDateString('ru-RU', { 
            day: 'numeric', 
            month: 'short' 
        });

        return `
            <div class="item-card">
                <div class="item-info">
                    <div class="item-name">${category.icon} ${expense.name}</div>
                    <div class="item-meta">${dateStr}</div>
                    <div class="item-amount">${formatCurrency(expense.amount)}</div>
                </div>
                <div class="item-actions">
                    <button onclick="editDailyExpense(${expense.id})" class="btn btn--sm btn--outline">‚úèÔ∏è</button>
                    <button onclick="removeDailyExpense(${expense.id})" class="btn btn--sm btn--outline">üóëÔ∏è</button>
                </div>
            </div>
        `;
    }).join('');
}

function renderRecentTransactions() {
    const container = document.getElementById('recentTransactions');
    if (!container) return;

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const allTransactions = [
        ...appData.currentPeriod.incomes.map(item => ({...item, type: 'income'})),
        ...appData.currentPeriod.fixedExpenses.map(item => ({...item, type: 'expense'})),
        ...appData.currentPeriod.dailyExpenses.map(item => ({...item, type: 'daily'}))
    ].sort((a, b) => new Date(b.date) - new Date(a.date)).slice(0, 5);

    if (allTransactions.length === 0) {
        container.innerHTML = '<p class="empty-state">–û–ø–µ—Ä–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</p>';
        return;
    }

    container.innerHTML = allTransactions.map(transaction => {
        const typeIcon = transaction.type === 'income' ? 'üí∞' : 'üí≥';
        const typeClass = transaction.type === 'income' ? 'income' : 'expense';

        return `
            <div class="transaction-item">
                <span class="transaction-icon">${typeIcon}</span>
                <div class="transaction-info">
                    <div class="transaction-name">${transaction.name}</div>
                    <div class="transaction-date">${new Date(transaction.date).toLocaleDateString('ru-RU')}</div>
                </div>
                <div class="transaction-amount ${typeClass}">${formatCurrency(transaction.amount)}</div>
            </div>
        `;
    }).join('');
}

function renderArchive() {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∞
    const container = document.getElementById('archiveList');
    if (container) {
        container.innerHTML = '<p class="empty-state">–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç</p>';
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∞–º–∏
function initializeTabs() {
    const tabButtons = document.querySelectorAll('.tab-btn');
    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            const tabId = button.dataset.tab;
            switchTab(tabId);
        });
    });
}

function switchTab(tabId) {
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));

    const targetButton = document.querySelector(`[data-tab="${tabId}"]`);
    const targetContent = document.getElementById(tabId);

    if (targetButton) targetButton.classList.add('active');
    if (targetContent) targetContent.classList.add('active');
}

// –ö–Ω–æ–ø–∫–∞ "–ù–∞–≤–µ—Ä—Ö"
function initializeScrollToTop() {
    const scrollBtn = document.getElementById('scrollToTopBtn');

    function toggleScrollButton() {
        if (scrollBtn) {
            if (window.scrollY > 300) {
                scrollBtn.classList.add('visible');
            } else {
                scrollBtn.classList.remove('visible');
            }
        }
    }

    window.addEventListener('scroll', toggleScrollButton, { passive: true });
}

function scrollToTop() {
    window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });
}

// Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
function initializeTelegramWebApp() {
    if (window.Telegram?.WebApp) {
        tg = window.Telegram.WebApp;
        tg.ready();
        tg.expand();
        document.body.classList.add('tg-viewport');

        if (tg.themeParams) {
            const root = document.documentElement;
            if (tg.themeParams.bg_color) {
                root.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color);
            }
            if (tg.themeParams.text_color) {
                root.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color);
            }
        }

        console.log('ü§ñ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
function initializeDefaultData() {
    const today = new Date();

    if (!appData.currentPeriod.startDate) {
        appData.currentPeriod.startDate = new Date(today.getFullYear(), today.getMonth(), 1).toISOString().split('T')[0];
    }

    if (!appData.currentPeriod.endDate) {
        appData.currentPeriod.endDate = new Date(today.getFullYear(), today.getMonth() + 1, 0).toISOString().split('T')[0];
    }

    if (!appData.currentPeriod.savingsPercentage) {
        appData.currentPeriod.savingsPercentage = 20;
    }

    if (!appData.currentPeriod.dailyBudgetCarryover) {
        appData.currentPeriod.dailyBudgetCarryover = {};
    }

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function loadInitialData() {
    await loadAllSavedData();

    renderIncomes();
    renderFixedExpenses();
    renderDailyExpenses();
    renderArchive();
    renderRecentTransactions();

    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');
    const savingsInput = document.getElementById('savingsPercentage');
    const savingsDisplay = document.getElementById('savingsPercentageDisplay');
    const dateInput = document.getElementById('dailyExpenseDate');

    if (startDateInput && appData.currentPeriod.startDate) {
        startDateInput.value = appData.currentPeriod.startDate;
    }

    if (endDateInput && appData.currentPeriod.endDate) {
        endDateInput.value = appData.currentPeriod.endDate;
    }

    if (savingsInput && appData.currentPeriod.savingsPercentage) {
        savingsInput.value = appData.currentPeriod.savingsPercentage;
    }

    if (savingsDisplay && appData.currentPeriod.savingsPercentage) {
        savingsDisplay.textContent = appData.currentPeriod.savingsPercentage;
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ –ø–æ–ª–µ –¥–∞—Ç—ã –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ç—Ä–∞—Ç
    if (dateInput) {
        dateInput.value = new Date().toISOString().split('T')[0];
    }

    updatePeriodTitle();
    updateAllCalculations();
}

// ============================================= 
// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// =============================================
async function initializeApp() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

    try {
        // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        initializeTelegramWebApp();

        // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        initializeDefaultData();

        // 3. –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await loadInitialData();

        // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        initializeTabs();
        initializeHeaderScroll();
        initializeScrollToTop();

        // 5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        setupEventListeners();

        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');

    if (startDateInput) {
        startDateInput.addEventListener('change', savePlanningPeriod);
    }

    if (endDateInput) {
        endDateInput.addEventListener('change', savePlanningPeriod);
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π
    const savingsInput = document.getElementById('savingsPercentage');

    if (savingsInput) {
        savingsInput.addEventListener('input', (e) => {
            updateSavingsPercentage(e.target.value);
        });

        savingsInput.addEventListener('change', (e) => {
            saveSavingsPercentage(e.target.value);
        });
    }

    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp);
} else {
    initializeApp();
}
