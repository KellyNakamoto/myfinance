// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô app.js –° –í–°–ï–ú–ò –§–ò–ö–°–ê–ú–ò

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let appData = {
    currentPeriod: {
        id: "2025_10",
        title: "–û–∫—Ç—è–±—Ä—å 2025",
        startDate: "2025-10-01",
        endDate: "2025-10-31",
        incomes: [],
        fixedExpenses: [],
        savingsPercentage: 20,
        dailyExpenses: []
    },
    categories: [
        {id: "food", name: "–ï–¥–∞", icon: "üçΩÔ∏è", keywords: ["–∫–∞—Ñ–µ", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–ø—Ä–æ–¥—É–∫—Ç—ã", "–µ–¥–∞", "–æ–±–µ–¥", "–∑–∞–≤—Ç—Ä–∞–∫", "—É–∂–∏–Ω", "–∫–æ—Ñ–µ"]},
        {id: "transport", name: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", icon: "üöó", keywords: ["—Ç–∞–∫—Å–∏", "–∞–≤—Ç–æ–±—É—Å", "–º–µ—Ç—Ä–æ", "–±–µ–Ω–∑–∏–Ω", "–ø–∞—Ä–∫–æ–≤–∫–∞"]},
        {id: "entertainment", name: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", icon: "üé¨", keywords: ["–∫–∏–Ω–æ", "–∫–æ–Ω—Ü–µ—Ä—Ç", "–∏–≥—Ä—ã", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"]},
        {id: "shopping", name: "–ü–æ–∫—É–ø–∫–∏", icon: "üõçÔ∏è", keywords: ["–æ–¥–µ–∂–¥–∞", "–æ–±—É–≤—å", "—Ç–µ—Ö–Ω–∏–∫–∞", "–ø–æ–∫—É–ø–∫–∏"]},
        {id: "health", name: "–ó–¥–æ—Ä–æ–≤—å–µ", icon: "‚öïÔ∏è", keywords: ["–≤—Ä–∞—á", "–ª–µ–∫–∞—Ä—Å—Ç–≤–∞", "–∞–ø—Ç–µ–∫–∞"]},
        {id: "other", name: "–ü—Ä–æ—á–µ–µ", icon: "üìã", keywords: []}
    ]
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
let editingState = {
    mode: null, // 'income', 'fixed', 'daily'
    itemId: null,
    originalData: null
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —à–∞–ø–∫–∏ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
let lastScrollY = window.scrollY;
let ticking = false;

// Telegram WebApp –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
let tg = null;

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –ò –ó–ê–ì–†–£–ó–ö–ò
// ===========================================

// –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
function saveToStorage(key, data) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å localStorage
        if (typeof(Storage) === "undefined") {
            console.warn('localStorage –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
        if (data === null || data === undefined) {
            console.warn(`–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ ${key}`);
            return false;
        }
        
        const jsonString = JSON.stringify(data);
        localStorage.setItem(key, jsonString);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        const saved = localStorage.getItem(key);
        if (saved === jsonString) {
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ ${key}:`, data);
            return true;
        } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ ${key}`);
            return false;
        }
        
    } catch (e) {
        console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${key}:`, e);
        return false;
    }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
function loadFromStorage(key, defaultValue = null) {
    try {
        if (typeof(Storage) === "undefined") {
            console.warn('localStorage –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            return defaultValue;
        }
        
        const saved = localStorage.getItem(key);
        if (!saved) {
            console.log(`–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${key}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
            return defaultValue;
        }
        
        const parsed = JSON.parse(saved);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ ${key}:`, parsed);
        return parsed;
        
    } catch (e) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${key}:`, e);
        return defaultValue;
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
function saveAllData() {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    let successCount = 0;
    const totalSaves = 6;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥–∞
    const periodData = {
        id: appData.currentPeriod.id,
        title: appData.currentPeriod.title,
        startDate: appData.currentPeriod.startDate,
        endDate: appData.currentPeriod.endDate,
        savingsPercentage: appData.currentPeriod.savingsPercentage
    };
    
    if (saveToStorage('appData_currentPeriod', periodData)) successCount++;
    if (saveToStorage('appData_incomes', appData.currentPeriod.incomes)) successCount++;
    if (saveToStorage('appData_fixedExpenses', appData.currentPeriod.fixedExpenses)) successCount++;
    if (saveToStorage('appData_dailyExpenses', appData.currentPeriod.dailyExpenses)) successCount++;
    if (saveToStorage('appData_savingsPercentage', appData.currentPeriod.savingsPercentage)) successCount++;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    const startDate = appData.currentPeriod.startDate;
    const endDate = appData.currentPeriod.endDate;
    if (startDate && saveToStorage('appData_startDate', startDate)) successCount++;
    if (endDate && saveToStorage('appData_endDate', endDate)) successCount++;
    
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${successCount}/${totalSaves + 1} —É—Å–ø–µ—à–Ω–æ`);
    
    return successCount >= totalSaves;
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
function loadAllSavedData() {
    console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    const savedAppData = loadFromStorage('appData_currentPeriod');
    if (savedAppData) {
        appData.currentPeriod = { ...appData.currentPeriod, ...savedAppData };
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', appData.currentPeriod);
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Å—Å–∏–≤—ã –¥–∞–Ω–Ω—ã—Ö
    const savedIncomes = loadFromStorage('appData_incomes', []);
    const savedFixedExpenses = loadFromStorage('appData_fixedExpenses', []);
    const savedDailyExpenses = loadFromStorage('appData_dailyExpenses', []);
    
    if (Array.isArray(savedIncomes)) {
        appData.currentPeriod.incomes = savedIncomes;
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ—Ö–æ–¥–æ–≤: ${savedIncomes.length}`);
    }
    
    if (Array.isArray(savedFixedExpenses)) {
        appData.currentPeriod.fixedExpenses = savedFixedExpenses;
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤: ${savedFixedExpenses.length}`);
    }
    
    if (Array.isArray(savedDailyExpenses)) {
        appData.currentPeriod.dailyExpenses = savedDailyExpenses;
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ç—Ä–∞—Ç: ${savedDailyExpenses.length}`);
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π
    const savedSavingsPercentage = loadFromStorage('appData_savingsPercentage');
    if (savedSavingsPercentage !== null) {
        appData.currentPeriod.savingsPercentage = parseInt(savedSavingsPercentage);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π: ${appData.currentPeriod.savingsPercentage}%`);
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç—ã
    const savedStartDate = loadFromStorage('appData_startDate');
    const savedEndDate = loadFromStorage('appData_endDate');
    
    if (savedStartDate) {
        appData.currentPeriod.startDate = savedStartDate;
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: ${savedStartDate}`);
    }
    
    if (savedEndDate) {
        appData.currentPeriod.endDate = savedEndDate;
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞: ${savedEndDate}`);
    }
    
    console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–ê–¢–ê–ú–ò
// =======================================

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å—å—é
function savePlanningPeriod() {
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');
    
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    let hasChanges = false;
    
    if (startDateInput && startDateInput.value) {
        const newStartDate = startDateInput.value;
        if (newStartDate !== appData.currentPeriod.startDate) {
            appData.currentPeriod.startDate = newStartDate;
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: ${newStartDate}`);
            hasChanges = true;
        }
    }
    
    if (endDateInput && endDateInput.value) {
        const newEndDate = endDateInput.value;
        if (newEndDate !== appData.currentPeriod.endDate) {
            appData.currentPeriod.endDate = newEndDate;
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞: ${newEndDate}`);
            hasChanges = true;
        }
    }
    
    if (hasChanges) {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—ã
        saveToStorage('appData_startDate', appData.currentPeriod.startDate);
        saveToStorage('appData_endDate', appData.currentPeriod.endDate);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–∏–æ–¥–∞
        updatePeriodTitle();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        saveAllData();
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º
        updateAllCalculations();
        
        console.log('‚úÖ –ü–µ—Ä–∏–æ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∞
function updatePeriodTitle() {
    try {
        const startDate = new Date(appData.currentPeriod.startDate);
        const month = startDate.toLocaleString('ru-RU', { month: 'long' });
        const year = startDate.getFullYear();
        appData.currentPeriod.title = `${month.charAt(0).toUpperCase() + month.slice(1)} ${year}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–∏–æ–¥–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        const periodBtn = document.querySelector('.current-period');
        if (periodBtn) {
            periodBtn.textContent = appData.currentPeriod.title;
        }
        
        console.log(`‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–∏–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: ${appData.currentPeriod.title}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∞:', error);
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π
function saveSavingsPercentage(value) {
    const newValue = parseInt(value);
    if (newValue !== appData.currentPeriod.savingsPercentage) {
        appData.currentPeriod.savingsPercentage = newValue;
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π: ${newValue}%`);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        saveToStorage('appData_savingsPercentage', newValue);
        saveAllData();
        updateAllCalculations();
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ü–†–û–ì–†–ï–°–°–ê –ë–Æ–î–ñ–ï–¢–ê
// =================================================

function updateBudgetProgress(spentAmount, totalBudget) {
    const progressRing = document.getElementById('budgetProgressRing');
    if (!progressRing) return;
    
    let progress = 0;
    if (totalBudget > 0) {
        progress = Math.min((spentAmount / totalBudget) * 100, 100);
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    let color = 'var(--color-primary)';
    if (progress > 100) {
        color = 'var(--color-expense)';
    } else if (progress > 80) {
        color = 'var(--color-warning)';
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä—É–≥–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const circumference = 2 * Math.PI * 50; // —Ä–∞–¥–∏—É—Å 50px
    const offset = circumference - (progress / 100) * circumference;
    
    // –°–æ–∑–¥–∞–µ–º SVG —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progressRing.innerHTML = `
        <svg width="120" height="120" viewBox="0 0 120 120" style="position: absolute; top: 0; left: 0; z-index: 1;">
            <!-- –§–æ–Ω–æ–≤—ã–π –∫—Ä—É–≥ -->
            <circle
                cx="60"
                cy="60"
                r="50"
                fill="none"
                stroke="rgba(255, 255, 255, 0.1)"
                stroke-width="8"
            />
            <!-- –ü—Ä–æ–≥—Ä–µ—Å—Å -->
            <circle
                cx="60"
                cy="60"
                r="50"
                fill="none"
                stroke="${color}"
                stroke-width="8"
                stroke-linecap="round"
                stroke-dasharray="${circumference}"
                stroke-dashoffset="${offset}"
                transform="rotate(-90 60 60)"
                style="transition: stroke-dashoffset 0.5s ease-in-out;"
            />
        </svg>
    `;
    
    console.log(`–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${progress.toFixed(1)}% (${formatCurrency(spentAmount)} –∏–∑ ${formatCurrency(totalBudget)})`);
}

// TELEGRAM WEBAPP –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò
// ==========================================

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–∫—Ä—ã—Ç–∏—è —à–∞–ø–∫–∏ –¥–ª—è Telegram WebApp
function initializeHeaderScroll() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –º—ã –≤ Telegram WebApp
    if (window.Telegram?.WebApp) {
        console.log('ü§ñ Telegram WebApp –æ–±–Ω–∞—Ä—É–∂–µ–Ω - –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
        
        // –í Telegram WebApp –ù–ï —Å–∫—Ä—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
        // –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–µ–∑ —Å–∫—Ä—ã—Ç–∏—è
        
        const header = document.getElementById('compactHeader');
        const navigation = document.getElementById('tabNavigation');
        
        if (header) {
            header.style.transform = 'translateY(0)';
            header.style.position = 'fixed';
        }
        
        if (navigation) {
            navigation.style.transform = 'translateY(0)';
            navigation.style.position = 'fixed';
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è CSS —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        document.body.classList.add('tg-viewport');
        
        return; // –í—ã—Ö–æ–¥–∏–º, –Ω–µ –¥–æ–±–∞–≤–ª—è—è —Å–∫—Ä–æ–ª–ª-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    }
    
    // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    const header = document.getElementById('compactHeader');
    const navigation = document.getElementById('tabNavigation');
    
    function updateHeaderVisibility() {
        if (window.scrollY > lastScrollY && window.scrollY > 100) {
            if (header) header.style.transform = 'translateY(-100%)';
            if (navigation) navigation.style.transform = 'translateY(-100%)';
        } else {
            if (header) header.style.transform = 'translateY(0)';
            if (navigation) navigation.style.transform = 'translateY(0)';
        }
        lastScrollY = window.scrollY;
        ticking = false;
    }

    function requestTick() {
        if (!ticking) {
            requestAnimationFrame(updateHeaderVisibility);
            ticking = true;
        }
    }

    window.addEventListener('scroll', requestTick, { passive: true });
    document.addEventListener('touchmove', requestTick, { passive: true });
}

function initializeTelegramWebApp() {
    if (window.Telegram?.WebApp) {
        tg = window.Telegram.WebApp;
        tg.ready();
        tg.expand();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
        document.body.classList.add('tg-viewport');
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –ø–æ–¥ —Ç–µ–º—É Telegram
        if (tg.themeParams) {
            const root = document.documentElement;
            if (tg.themeParams.bg_color) {
                root.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color);
            }
            if (tg.themeParams.text_color) {
                root.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color);
            }
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        setTimeout(() => {
            const header = document.getElementById('compactHeader');
            const navigation = document.getElementById('tabNavigation');
            
            if (header) {
                header.style.position = 'fixed';
                header.style.transform = 'translateY(0)';
                header.style.zIndex = '1000';
            }
            
            if (navigation) {
                navigation.style.position = 'fixed';
                navigation.style.transform = 'translateY(0)';
                navigation.style.zIndex = '999';
            }
        }, 100);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è viewport –≤ Telegram
        tg.onEvent('viewportChanged', function() {
            console.log('üì± Viewport –∏–∑–º–µ–Ω–µ–Ω –≤ Telegram WebApp');
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            const header = document.getElementById('compactHeader');
            const navigation = document.getElementById('tabNavigation');
            
            if (header) {
                header.style.transform = 'translateY(0)';
            }
            
            if (navigation) {
                navigation.style.transform = 'translateY(0)';
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        tg.onEvent('mainButtonClicked', function() {
            saveAllData();
        });
        
        console.log('ü§ñ Telegram WebApp –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
}

// –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –≤ Telegram
let telegramBackupInterval;

function startTelegramBackup() {
    if (window.Telegram?.WebApp) {
        telegramBackupInterval = setInterval(() => {
            console.log('üîÑ –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Telegram WebApp');
            saveAllData();
        }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }
}

// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
function stopTelegramBackup() {
    if (telegramBackupInterval) {
        clearInterval(telegramBackupInterval);
        telegramBackupInterval = null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function restoreNavigationState() {
    if (window.Telegram?.WebApp) {
        const header = document.getElementById('compactHeader');
        const navigation = document.getElementById('tabNavigation');
        
        if (header) {
            header.style.position = 'fixed';
            header.style.top = '0';
            header.style.transform = 'translateY(0)';
            header.style.zIndex = '1000';
        }
        
        if (navigation) {
            navigation.style.position = 'fixed';
            navigation.style.top = '72px';
            navigation.style.transform = 'translateY(0)';
            navigation.style.zIndex = '999';
        }
        
        console.log('üîß –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }
}

// –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// ==========================

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
function initializeDefaultData() {
    const today = new Date();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
    if (!appData.currentPeriod.startDate || isNaN(new Date(appData.currentPeriod.startDate).getTime())) {
        appData.currentPeriod.startDate = new Date(today.getFullYear(), today.getMonth(), 1)
            .toISOString().split('T')[0];
        console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', appData.currentPeriod.startDate);
    }
    
    if (!appData.currentPeriod.endDate || isNaN(new Date(appData.currentPeriod.endDate).getTime())) {
        appData.currentPeriod.endDate = new Date(today.getFullYear(), today.getMonth() + 1, 0)
            .toISOString().split('T')[0];
        console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', appData.currentPeriod.endDate);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π
    if (isNaN(appData.currentPeriod.savingsPercentage) || appData.currentPeriod.savingsPercentage < 0) {
        appData.currentPeriod.savingsPercentage = 20;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    if (!Array.isArray(appData.currentPeriod.incomes)) {
        appData.currentPeriod.incomes = [];
    }
    if (!Array.isArray(appData.currentPeriod.fixedExpenses)) {
        appData.currentPeriod.fixedExpenses = [];
    }
    if (!Array.isArray(appData.currentPeriod.dailyExpenses)) {
        appData.currentPeriod.dailyExpenses = [];
    }
    
    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

function loadInitialData() {
    renderIncomes();
    renderFixedExpenses();
    renderDailyExpenses();
    renderArchive();
    renderRecentTransactions();

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ø–æ–ª—è
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');
    const savingsInput = document.getElementById('savingsPercentage');
    const savingsDisplay = document.getElementById('savingsPercentageDisplay');

    if (startDateInput && appData.currentPeriod.startDate) {
        startDateInput.value = appData.currentPeriod.startDate;
        console.log(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ –ø–æ–ª–µ: ${appData.currentPeriod.startDate}`);
    }
    
    if (endDateInput && appData.currentPeriod.endDate) {
        endDateInput.value = appData.currentPeriod.endDate;
        console.log(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ –ø–æ–ª–µ: ${appData.currentPeriod.endDate}`);
    }
    
    if (savingsInput && appData.currentPeriod.savingsPercentage) {
        savingsInput.value = appData.currentPeriod.savingsPercentage;
        console.log(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π: ${appData.currentPeriod.savingsPercentage}%`);
    }
    
    if (savingsDisplay && appData.currentPeriod.savingsPercentage) {
        savingsDisplay.textContent = appData.currentPeriod.savingsPercentage;
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    updatePeriodTitle();
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∞–º–∏
function initializeTabs() {
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');
    
    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            const tabId = button.dataset.tab;
            switchTab(tabId);
        });
    });
}

function switchTab(tabId) {
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const targetButton = document.querySelector(`[data-tab="${tabId}"]`);
    const targetContent = document.getElementById(tabId);
    
    if (targetButton) targetButton.classList.add('active');
    if (targetContent) targetContent.classList.add('active');
}

// –ö–Ω–æ–ø–∫–∞ "–ù–∞–≤–µ—Ä—Ö"
function initializeScrollToTop() {
    const scrollBtn = document.getElementById('scrollToTopBtn');
    
    function toggleScrollButton() {
        if (scrollBtn) {
            if (window.scrollY > 300) {
                scrollBtn.classList.add('visible');
            } else {
                scrollBtn.classList.remove('visible');
            }
        }
    }
    
    window.addEventListener('scroll', toggleScrollButton, { passive: true });
}

function scrollToTop() {
    window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º —Å–æ —Å—Ç—Ä–µ–ª–∫–∞–º–∏
function scrollTabs(direction) {
    const container = document.getElementById('tabsContainer');
    if (container) {
        const scrollAmount = 200;
        if (direction === -1) {
            container.scrollBy({ left: -scrollAmount, behavior: 'smooth' });
        } else {
            container.scrollBy({ left: scrollAmount, behavior: 'smooth' });
        }
    }
}

// –û–°–ù–û–í–ù–´–ï –†–ê–°–ß–ï–¢–´
// ================

function updateAllCalculations() {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç—ã...');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç NaN
    const totalIncome = appData.currentPeriod.incomes.reduce((sum, income) => {
        const amount = parseFloat(income.amount) || 0;
        return sum + amount;
    }, 0);
    
    const totalFixed = appData.currentPeriod.fixedExpenses.reduce((sum, expense) => {
        const amount = parseFloat(expense.amount) || 0;
        return sum + amount;
    }, 0);
    
    const savingsPercentage = parseFloat(appData.currentPeriod.savingsPercentage) || 0;
    const totalSavings = (totalIncome * savingsPercentage) / 100;
    
    const totalDailyExpenses = appData.currentPeriod.dailyExpenses.reduce((sum, expense) => {
        const amount = parseFloat(expense.amount) || 0;
        return sum + amount;
    }, 0);
    
    const totalSpent = totalFixed + totalDailyExpenses;
    const remainingBudget = totalIncome - totalSpent - totalSavings;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
    let dailyBudget = 0;
    try {
        const startDate = new Date(appData.currentPeriod.startDate);
        const endDate = new Date(appData.currentPeriod.endDate);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç
        if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
            console.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            const today = new Date();
            startDate.setTime(new Date(today.getFullYear(), today.getMonth(), 1).getTime());
            endDate.setTime(new Date(today.getFullYear(), today.getMonth() + 1, 0).getTime());
        }
        
        const timeDiff = endDate.getTime() - startDate.getTime();
        const totalDays = Math.ceil(timeDiff / (1000 * 60 * 60 * 24)) + 1;
        
        console.log('–†–∞—Å—á–µ—Ç –¥–Ω–µ–π:', {
            startDate: startDate.toISOString(),
            endDate: endDate.toISOString(),
            totalDays,
            remainingBudget
        });
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0 –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏
        if (totalDays > 0 && remainingBudget >= 0) {
            dailyBudget = remainingBudget / totalDays;
        } else if (totalDays > 0 && totalIncome > 0) {
            // –ï—Å–ª–∏ –±—é–¥–∂–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, –Ω–æ –µ—Å—Ç—å –¥–æ—Ö–æ–¥—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 0
            dailyBudget = 0;
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–Ω–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 0
            dailyBudget = 0;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞:', error);
        dailyBudget = 0;
    }
    
    // –¢—Ä–∞—Ç—ã —Å–µ–≥–æ–¥–Ω—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
    let todaySpent = 0;
    let todayRemaining = dailyBudget;
    let todayProgress = 0;
    
    try {
        const today = new Date().toISOString().split('T')[0];
        const todayExpenses = appData.currentPeriod.dailyExpenses.filter(exp => exp.date === today);
        
        todaySpent = todayExpenses.reduce((sum, expense) => {
            const amount = parseFloat(expense.amount) || 0;
            return sum + amount;
        }, 0);
        
        todayRemaining = Math.max(dailyBudget - todaySpent, 0);
        
        if (dailyBudget > 0) {
            todayProgress = Math.min((todaySpent / dailyBudget) * 100, 100);
        } else {
            todayProgress = todaySpent > 0 ? 100 : 0;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Ç—Ä–∞—Ç:', error);
    }
    
    console.log('–§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã:', {
        totalIncome,
        totalSpent,
        remainingBudget,
        dailyBudget,
        todaySpent,
        todayProgress
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç NaN
    updateElement('totalIncome', formatCurrency(totalIncome));
    updateElement('totalSpent', formatCurrency(totalSpent));
    updateElement('totalSavings', formatCurrency(totalSavings));
    updateElement('remainingBudget', formatCurrency(remainingBudget));
    updateElement('dailyBudget', formatCurrency(dailyBudget));
    updateElement('todaySpent', formatCurrency(todaySpent));
    updateElement('todayRemaining', formatCurrency(todayRemaining));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫—Ä—É–≥–∞ —Å –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
    updateBudgetProgress(todaySpent, dailyBudget);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
    let savingsProgress = 0;
    let currentSavings = 0;
    
    try {
        if (totalIncome > 0 && savingsPercentage > 0) {
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ 65% –º–µ—Å—è—Ü–∞ –ø—Ä–æ—à–ª–æ (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç)
            const monthProgress = 0.65;
            currentSavings = totalSavings * monthProgress;
            savingsProgress = totalSavings > 0 ? (currentSavings / totalSavings) * 100 : 0;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π:', error);
    }
    
    const savingsProgressBar = document.getElementById('savingsProgress');
    if (savingsProgressBar) {
        const progressValue = isNaN(savingsProgress) ? 0 : Math.min(savingsProgress, 100);
        savingsProgressBar.style.width = `${progressValue}%`;
    }
    
    updateElement('savingsGoal', formatCurrency(totalSavings));
    updateElement('savingsProgressText', `${formatCurrency(currentSavings)} –∏–∑ ${formatCurrency(totalSavings)}`);
}

// –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–û–•–û–î–ê–ú–ò
// ===================

function addIncome() {
    const titleInput = document.getElementById('incomeTitle');
    const amountInput = document.getElementById('incomeAmount');
    const categorySelect = document.getElementById('incomeCategory');
    
    if (!titleInput || !amountInput || !categorySelect) return;
    
    const title = titleInput.value.trim();
    const amount = parseFloat(amountInput.value);
    const category = categorySelect.value;
    
    if (!title || !amount || amount <= 0) {
        return;
    }
    
    if (editingState.mode === 'income' && editingState.itemId) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ—Ö–æ–¥
        const incomeIndex = appData.currentPeriod.incomes.findIndex(inc => inc.id === editingState.itemId);
        if (incomeIndex !== -1) {
            appData.currentPeriod.incomes[incomeIndex] = {
                ...appData.currentPeriod.incomes[incomeIndex],
                name: title,
                amount: amount,
                category: category
            };
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cancelEdit();
        
        // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
        const button = document.querySelector('[onclick="addIncome()"]');
        if (button) button.textContent = '–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥';
    } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ—Ö–æ–¥
        const newIncome = {
            id: Date.now(),
            name: title,
            amount: amount,
            category: category,
            date: new Date().toISOString().split('T')[0]
        };
        
        appData.currentPeriod.incomes.push(newIncome);
    }
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    saveAllData();
    
    titleInput.value = '';
    amountInput.value = '';
    categorySelect.value = 'work';
    
    renderIncomes();
    updateAllCalculations();
}

function editIncome(id) {
    const income = appData.currentPeriod.incomes.find(inc => inc.id === id);
    if (!income) return;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    editingState.mode = 'income';
    editingState.itemId = id;
    editingState.originalData = { ...income };
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const titleInput = document.getElementById('incomeTitle');
    const amountInput = document.getElementById('incomeAmount');
    const categorySelect = document.getElementById('incomeCategory');
    
    if (titleInput) titleInput.value = income.name;
    if (amountInput) amountInput.value = income.amount;
    if (categorySelect) categorySelect.value = income.category;
    
    // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    const button = document.querySelector('[onclick="addIncome()"]');
    if (button) button.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
    
    // –°–∫—Ä–æ–ª–ª–∏–º –∫ —Ñ–æ—Ä–º–µ
    if (titleInput) {
        titleInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
        titleInput.focus();
    }
}

function removeIncome(id) {
    const income = appData.currentPeriod.incomes.find(inc => inc.id === id);
    if (!income) return;
    
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –¥–æ—Ö–æ–¥ "${income.name}"?`)) {
        appData.currentPeriod.incomes = appData.currentPeriod.incomes.filter(inc => inc.id !== id);
        
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        saveAllData();
        
        renderIncomes();
        updateAllCalculations();
    }
}

function renderIncomes() {
    const container = document.getElementById('incomeList');
    if (!container) return;
    
    if (appData.currentPeriod.incomes.length === 0) {
        container.innerHTML = '<div class="empty-state">–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ –¥–æ—Ö–æ–¥—ã</div>';
        return;
    }
    
    container.innerHTML = appData.currentPeriod.incomes.map(income => `
        <div class="list-item ${editingState.mode === 'income' && editingState.itemId === income.id ? 'editing' : ''}">
            <div class="item-info">
                <div class="item-name">${income.name}</div>
                <div class="item-amount">${formatCurrency(income.amount)}</div>
                <div class="item-category">${income.category}</div>
            </div>
            <div class="item-actions">
                <button class="action-btn edit" onclick="editIncome(${income.id})">–ò–∑–º–µ–Ω–∏—Ç—å</button>
                <button class="action-btn danger" onclick="removeIncome(${income.id})">–£–¥–∞–ª–∏—Ç—å</button>
            </div>
        </div>
    `).join('');
}

// –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ú–ò –†–ê–°–•–û–î–ê–ú–ò
// ==================================

function addFixedExpense() {
    const titleInput = document.getElementById('expenseTitle');
    const amountInput = document.getElementById('expenseAmount');
    const categorySelect = document.getElementById('expenseCategory');
    
    if (!titleInput || !amountInput || !categorySelect) return;
    
    const title = titleInput.value.trim();
    const amount = parseFloat(amountInput.value);
    const category = categorySelect.value;
    
    if (!title || !amount || amount <= 0) {
        return;
    }
    
    if (editingState.mode === 'fixed' && editingState.itemId) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞—Å—Ö–æ–¥
        const expenseIndex = appData.currentPeriod.fixedExpenses.findIndex(exp => exp.id === editingState.itemId);
        if (expenseIndex !== -1) {
            appData.currentPeriod.fixedExpenses[expenseIndex] = {
                ...appData.currentPeriod.fixedExpenses[expenseIndex],
                name: title,
                amount: amount,
                category: category
            };
        }
        
        cancelEdit();
        
        const button = document.querySelector('[onclick="addFixedExpense()"]');
        if (button) button.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥';
    } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥
        const newExpense = {
            id: Date.now(),
            name: title,
            amount: amount,
            category: category,
            date: new Date().toISOString().split('T')[0]
        };
        
        appData.currentPeriod.fixedExpenses.push(newExpense);
    }
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    saveAllData();
    
    titleInput.value = '';
    amountInput.value = '';
    categorySelect.value = 'housing';
    
    renderFixedExpenses();
    updateAllCalculations();
}

function editFixedExpense(id) {
    const expense = appData.currentPeriod.fixedExpenses.find(exp => exp.id === id);
    if (!expense) return;
    
    editingState.mode = 'fixed';
    editingState.itemId = id;
    editingState.originalData = { ...expense };
    
    const titleInput = document.getElementById('expenseTitle');
    const amountInput = document.getElementById('expenseAmount');
    const categorySelect = document.getElementById('expenseCategory');
    
    if (titleInput) titleInput.value = expense.name;
    if (amountInput) amountInput.value = expense.amount;
    if (categorySelect) categorySelect.value = expense.category;
    
    const button = document.querySelector('[onclick="addFixedExpense()"]');
    if (button) button.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
    
    if (titleInput) {
        titleInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
        titleInput.focus();
    }
}

function removeFixedExpense(id) {
    const expense = appData.currentPeriod.fixedExpenses.find(exp => exp.id === id);
    if (!expense) return;
    
    if (confirm(`–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ "${expense.name}"?`)) {
        appData.currentPeriod.fixedExpenses = appData.currentPeriod.fixedExpenses.filter(exp => exp.id !== id);
        
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        saveAllData();
        
        renderFixedExpenses();
        updateAllCalculations();
    }
}

function renderFixedExpenses() {
    const container = document.getElementById('fixedExpensesList');
    if (!container) return;
    
    if (appData.currentPeriod.fixedExpenses.length === 0) {
        container.innerHTML = '<div class="empty-state">–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã</div>';
        return;
    }
    
    container.innerHTML = appData.currentPeriod.fixedExpenses.map(expense => `
        <div class="list-item ${editingState.mode === 'fixed' && editingState.itemId === expense.id ? 'editing' : ''}">
            <div class="item-info">
                <div class="item-name">${expense.name}</div>
                <div class="item-amount">${formatCurrency(expense.amount)}</div>
                <div class="item-category">${expense.category}</div>
            </div>
            <div class="item-actions">
                <button class="action-btn edit" onclick="editFixedExpense(${expense.id})">–ò–∑–º–µ–Ω–∏—Ç—å</button>
                <button class="action-btn danger" onclick="removeFixedExpense(${expense.id})">–£–¥–∞–ª–∏—Ç—å</button>
            </div>
        </div>
    `).join('');
}

// –£–ü–†–ê–í–õ–ï–ù–ò–ï –ï–ñ–ï–î–ù–ï–í–ù–´–ú–ò –¢–†–ê–¢–ê–ú–ò
// ==============================

function addDailyExpense() {
    const titleInput = document.getElementById('dailyExpenseTitle');
    const amountInput = document.getElementById('dailyExpenseAmount');
    const categorySelect = document.getElementById('dailyExpenseCategory');
    
    if (!titleInput || !amountInput || !categorySelect) return;
    
    const title = titleInput.value.trim();
    const amount = parseFloat(amountInput.value);
    const category = categorySelect.value;
    
    if (!title || !amount || amount <= 0) {
        return;
    }
    
    if (editingState.mode === 'daily' && editingState.itemId) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç—Ä–∞—Ç—É
        const expenseIndex = appData.currentPeriod.dailyExpenses.findIndex(exp => exp.id === editingState.itemId);
        if (expenseIndex !== -1) {
            appData.currentPeriod.dailyExpenses[expenseIndex] = {
                ...appData.currentPeriod.dailyExpenses[expenseIndex],
                name: title,
                amount: amount,
                category: category
            };
        }
        
        cancelEdit();
        
        const button = document.querySelector('[onclick="addDailyExpense()"]');
        if (button) button.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É';
    } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞—Ç—É
        const newExpense = {
            id: Date.now(),
            name: title,
            amount: amount,
            category: category,
            date: new Date().toISOString().split('T')[0]
        };
        
        appData.currentPeriod.dailyExpenses.push(newExpense);
    }
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    saveAllData();
    
    titleInput.value = '';
    amountInput.value = '';
    categorySelect.value = 'food';
    
    renderDailyExpenses();
    updateAllCalculations();
    renderRecentTransactions();
}

function editDailyExpense(id) {
    const expense = appData.currentPeriod.dailyExpenses.find(exp => exp.id === id);
    if (!expense) return;
    
    editingState.mode = 'daily';
    editingState.itemId = id;
    editingState.originalData = { ...expense };
    
    const titleInput = document.getElementById('dailyExpenseTitle');
    const amountInput = document.getElementById('dailyExpenseAmount');
    const categorySelect = document.getElementById('dailyExpenseCategory');
    
    if (titleInput) titleInput.value = expense.name;
    if (amountInput) amountInput.value = expense.amount;
    if (categorySelect) categorySelect.value = expense.category;
    
    const button = document.querySelector('[onclick="addDailyExpense()"]');
    if (button) button.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
    
    if (titleInput) {
        titleInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
        titleInput.focus();
    }
}

function removeDailyExpense(id) {
    const expense = appData.currentPeriod.dailyExpenses.find(exp => exp.id === id);
    if (!expense) return;
    
    if (confirm(`–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—É "${expense.name}"?`)) {
        appData.currentPeriod.dailyExpenses = appData.currentPeriod.dailyExpenses.filter(exp => exp.id !== id);
        
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        saveAllData();
        
        renderDailyExpenses();
        updateAllCalculations();
        renderRecentTransactions();
    }
}

function renderDailyExpenses() {
    const container = document.getElementById('dailyExpensesList');
    if (!container) return;
    
    if (appData.currentPeriod.dailyExpenses.length === 0) {
        container.innerHTML = '<div class="empty-state">–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –≤–∞—à–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ç—Ä–∞—Ç—ã</div>';
        return;
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    const sortedExpenses = [...appData.currentPeriod.dailyExpenses].sort((a, b) => 
        new Date(b.date) - new Date(a.date)
    );
    
    container.innerHTML = sortedExpenses.map(expense => {
        const categoryInfo = appData.categories.find(cat => cat.id === expense.category);
        const categoryIcon = categoryInfo ? categoryInfo.icon : 'üí∞';
        const categoryName = categoryInfo ? categoryInfo.name : expense.category;
        
        return `
            <div class="list-item ${editingState.mode === 'daily' && editingState.itemId === expense.id ? 'editing' : ''}">
                <div class="item-info">
                    <div class="item-name">${categoryIcon} ${expense.name}</div>
                    <div class="item-amount">${formatCurrency(expense.amount)}</div>
                    <div class="item-category">${formatDate(expense.date)} ‚Ä¢ ${categoryName}</div>
                </div>
                <div class="item-actions">
                    <button class="action-btn edit" onclick="editDailyExpense(${expense.id})">–ò–∑–º–µ–Ω–∏—Ç—å</button>
                    <button class="action-btn danger" onclick="removeDailyExpense(${expense.id})">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
        `;
    }).join('');
}

// –ë–´–°–¢–†–´–ï –§–û–†–ú–´
// =============

function showQuickExpense() {
    const overlay = document.getElementById('quickExpenseOverlay');
    if (overlay) {
        overlay.classList.add('active');
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
        setTimeout(() => {
            const firstInput = document.getElementById('quickExpenseTitle');
            if (firstInput) firstInput.focus();
        }, 300);
    }
}

function showQuickIncome() {
    const overlay = document.getElementById('quickIncomeOverlay');
    if (overlay) {
        overlay.classList.add('active');
        
        setTimeout(() => {
            const firstInput = document.getElementById('quickIncomeTitle');
            if (firstInput) firstInput.focus();
        }, 300);
    }
}

function hideQuickForm(type) {
    const overlay = document.getElementById(`quick${type.charAt(0).toUpperCase() + type.slice(1)}Overlay`);
    if (overlay) {
        overlay.classList.remove('active');
        
        // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π
        setTimeout(() => {
            if (type === 'expense') {
                const titleInput = document.getElementById('quickExpenseTitle');
                const amountInput = document.getElementById('quickExpenseAmount');
                const categorySelect = document.getElementById('quickExpenseCategory');
                
                if (titleInput) titleInput.value = '';
                if (amountInput) amountInput.value = '';
                if (categorySelect) categorySelect.value = 'food';
            } else if (type === 'income') {
                const titleInput = document.getElementById('quickIncomeTitle');
                const amountInput = document.getElementById('quickIncomeAmount');
                const categorySelect = document.getElementById('quickIncomeCategory');
                
                if (titleInput) titleInput.value = '';
                if (amountInput) amountInput.value = '';
                if (categorySelect) categorySelect.value = 'work';
            }
        }, 300);
    }
}

function addQuickExpense() {
    const titleInput = document.getElementById('quickExpenseTitle');
    const amountInput = document.getElementById('quickExpenseAmount');
    const categorySelect = document.getElementById('quickExpenseCategory');
    
    if (!titleInput || !amountInput || !categorySelect) return;
    
    const title = titleInput.value.trim();
    const amount = parseFloat(amountInput.value);
    const category = categorySelect.value;
    
    if (!title || !amount || amount <= 0) {
        return;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const autoCategory = detectCategory(title) || category;
    
    const newExpense = {
        id: Date.now(),
        name: title,
        amount: amount,
        category: autoCategory,
        date: new Date().toISOString().split('T')[0]
    };
    
    appData.currentPeriod.dailyExpenses.push(newExpense);
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    saveAllData();
    
    renderDailyExpenses();
    updateAllCalculations();
    renderRecentTransactions();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(`–¢—Ä–∞—Ç–∞ "${title}" –¥–æ–±–∞–≤–ª–µ–Ω–∞`, 'success');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    hideQuickForm('expense');
}

function addQuickIncome() {
    const titleInput = document.getElementById('quickIncomeTitle');
    const amountInput = document.getElementById('quickIncomeAmount');
    const categorySelect = document.getElementById('quickIncomeCategory');
    
    if (!titleInput || !amountInput || !categorySelect) return;
    
    const title = titleInput.value.trim();
    const amount = parseFloat(amountInput.value);
    const category = categorySelect.value;
    
    if (!title || !amount || amount <= 0) {
        return;
    }
    
    const newIncome = {
        id: Date.now(),
        name: title,
        amount: amount,
        category: category,
        date: new Date().toISOString().split('T')[0]
    };
    
    appData.currentPeriod.incomes.push(newIncome);
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    saveAllData();
    
    renderIncomes();
    updateAllCalculations();
    renderRecentTransactions();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(`–î–æ—Ö–æ–¥ "${title}" –¥–æ–±–∞–≤–ª–µ–Ω`, 'success');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    hideQuickForm('income');
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function detectCategory(title) {
    const lowerTitle = title.toLowerCase();
    
    for (const category of appData.categories) {
        for (const keyword of category.keywords) {
            if (lowerTitle.includes(keyword.toLowerCase())) {
                return category.id;
            }
        }
    }
    
    return null;
}

// –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
// ===========

function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    // –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    Object.assign(notification.style, {
        position: 'fixed',
        top: '20px',
        right: '20px',
        padding: '12px 20px',
        borderRadius: '8px',
        color: 'white',
        fontSize: '14px',
        fontWeight: '500',
        zIndex: '9999',
        opacity: '0',
        transform: 'translateX(100%)',
        transition: 'all 0.3s ease'
    });
    
    // –¶–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    switch (type) {
        case 'success':
            notification.style.background = 'var(--color-success)';
            break;
        case 'error':
            notification.style.background = 'var(--color-error)';
            break;
        case 'warning':
            notification.style.background = 'var(--color-warning)';
            break;
        default:
            notification.style.background = 'var(--color-primary)';
    }
    
    document.body.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.style.opacity = '1';
        notification.style.transform = 'translateX(0)';
    }, 100);
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.style.opacity = '0';
        notification.style.transform = 'translateX(100%)';
        
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

// –ü–û–°–õ–ï–î–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ò
// ==================

function renderRecentTransactions() {
    const container = document.getElementById('recentTransactions');
    if (!container) return;
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã
    const allTransactions = [
        ...appData.currentPeriod.incomes.map(income => ({
            ...income,
            type: 'income',
            icon: 'üí∞'
        })),
        ...appData.currentPeriod.fixedExpenses.map(expense => ({
            ...expense,
            type: 'expense',
            icon: 'üí≥'
        })),
        ...appData.currentPeriod.dailyExpenses.map(expense => {
            const categoryInfo = appData.categories.find(cat => cat.id === expense.category);
            return {
                ...expense,
                type: 'expense',
                icon: categoryInfo ? categoryInfo.icon : 'üõí'
            };
        })
    ];
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ ID (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    const recentTransactions = allTransactions
        .sort((a, b) => {
            const dateA = new Date(a.date);
            const dateB = new Date(b.date);
            if (dateB - dateA !== 0) {
                return dateB - dateA;
            }
            return b.id - a.id;
        })
        .slice(0, 5);
    
    if (recentTransactions.length === 0) {
        container.innerHTML = '<div class="empty-state">–û–ø–µ—Ä–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</div>';
        return;
    }
    
    container.innerHTML = recentTransactions.map(transaction => `
        <div class="recent-item">
            <div class="item-info">
                <div class="item-name">${transaction.icon} ${transaction.name}</div>
                <div class="item-meta">${formatDate(transaction.date)}</div>
            </div>
            <div class="item-amount ${transaction.type === 'income' ? 'income' : 'expense'}">
                ${transaction.type === 'income' ? '+' : '-'}${formatCurrency(transaction.amount)}
            </div>
        </div>
    `).join('');
}

// –ê–†–•–ò–í
// =====

function renderArchive() {
    const container = document.getElementById('archiveList');
    if (!container) return;
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞—Ä—Ö–∏–≤–∞ –ø–µ—Ä–∏–æ–¥–æ–≤
    container.innerHTML = '<div class="empty-state">–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –∑–¥–µ—Å—å</div>';
}

// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// =======================

function formatCurrency(amount) {
    if (isNaN(amount)) {
        return '0 ‚ÇΩ';
    }
    return new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: 'RUB',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
    }).format(amount);
}

function formatDate(dateString) {
    try {
        const date = new Date(dateString);
        if (isNaN(date.getTime())) {
            return dateString;
        }
        
        const today = new Date();
        const yesterday = new Date(today);
        yesterday.setDate(yesterday.getDate() - 1);
        
        if (date.toDateString() === today.toDateString()) {
            return '–°–µ–≥–æ–¥–Ω—è';
        } else if (date.toDateString() === yesterday.toDateString()) {
            return '–í—á–µ—Ä–∞';
        } else {
            return date.toLocaleDateString('ru-RU', {
                day: 'numeric',
                month: 'short'
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:', error);
        return dateString;
    }
}

function updateElement(id, value) {
    const element = document.getElementById(id);
    if (element) {
        // –ê–Ω–∏–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        element.style.transition = 'all 0.3s ease';
        element.style.transform = 'scale(1.05)';
        element.textContent = value;
        
        setTimeout(() => {
            element.style.transform = 'scale(1)';
        }, 300);
    }
}

function updateSavingsPercentage(value) {
    const display = document.getElementById('savingsPercentageDisplay');
    if (display) {
        display.textContent = value;
    }
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ù–ï –≤—ã–∑—ã–≤–∞–µ–º –∑–¥–µ—Å—å, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
}

function cancelEdit() {
    editingState.mode = null;
    editingState.itemId = null;
    editingState.originalData = null;
}

// –ê–Ω–∏–º–∞—Ü–∏—è —á–∏—Å–µ–ª –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
function animateNumbersOnLoad() {
    const elements = document.querySelectorAll('.metric-value');
    elements.forEach(el => {
        if (el.textContent.includes('‚ÇΩ')) {
            el.style.opacity = '0';
            el.style.transform = 'translateY(20px)';
            
            setTimeout(() => {
                el.style.transition = 'all 0.6s ease';
                el.style.opacity = '1';
                el.style.transform = 'translateY(0)';
            }, Math.random() * 300);
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
function initializeCurrentDate() {
    const currentDateElement = document.getElementById('currentDate');
    if (currentDateElement) {
        const today = new Date();
        const formattedDate = today.toLocaleDateString('ru-RU', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
        currentDateElement.textContent = formattedDate;
    }
}

// –°–û–ë–´–¢–ò–Ø –ù–ê –ó–ê–ö–†–´–¢–ò–ï
// ===================

// –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
window.addEventListener('beforeunload', function(e) {
    console.log('üö™ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...');
    
    // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    for (let i = 0; i < 3; i++) {
        saveAllData();
    }
    
    console.log('üíæ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('visibilitychange', function() {
    if (document.hidden) {
        console.log('üëÅÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...');
        saveAllData();
    }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞ –æ–∫–Ω–∞
window.addEventListener('blur', function() {
    console.log('üîç –û–∫–Ω–æ –ø–æ—Ç–µ—Ä—è–ª–æ —Ñ–æ–∫—É—Å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...');
    saveAllData();
});

// Telegram WebApp —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
if (window.Telegram?.WebApp) {
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ Telegram WebApp
    window.Telegram.WebApp.onEvent('mainButtonClicked', function() {
        saveAllData();
    });
    
    window.Telegram.WebApp.onEvent('backButtonClicked', function() {
        saveAllData();
    });
}

// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
window.addEventListener('orientationchange', function() {
    setTimeout(restoreNavigationState, 100);
});

// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', function() {
    setTimeout(restoreNavigationState, 100);
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π –¥–∞—Ç
document.addEventListener('DOMContentLoaded', function() {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª–µ–π –¥–∞—Ç
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');
    
    if (startDateInput) {
        startDateInput.addEventListener('change', function() {
            console.log('üóìÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞:', this.value);
            savePlanningPeriod();
        });
        
        startDateInput.addEventListener('blur', function() {
            console.log('üóìÔ∏è –ü–æ—Ç–µ—Ä—è —Ñ–æ–∫—É—Å–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã:', this.value);
            savePlanningPeriod();
        });
    }
    
    if (endDateInput) {
        endDateInput.addEventListener('change', function() {
            console.log('üóìÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∞ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞:', this.value);
            savePlanningPeriod();
        });
        
        endDateInput.addEventListener('blur', function() {
            console.log('üóìÔ∏è –ü–æ—Ç–µ—Ä—è —Ñ–æ–∫—É—Å–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã:', this.value);
            savePlanningPeriod();
        });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ Telegram
function handleTelegramKeyboard() {
    if (!window.Telegram?.WebApp) return;
    
    // –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    let initialHeight = window.innerHeight;
    
    window.addEventListener('resize', function() {
        const currentHeight = window.innerHeight;
        const heightDiff = initialHeight - currentHeight;
        
        if (heightDiff > 150) { // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—è–≤–∏–ª–∞—Å—å
            document.body.classList.add('keyboard-visible');
            console.log('‚å®Ô∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∞');
        } else { // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞
            document.body.classList.remove('keyboard-visible');
            console.log('‚å®Ô∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞');
        }
    });
}

// –û–°–ù–û–í–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// =====================

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —É—á–µ—Ç–æ–º Telegram WebApp
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
    initializeTelegramWebApp();
    
    // –ó–∞—Ç–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    initializeTabs();
    initializeHeaderScroll(); // –¢–µ–ø–µ—Ä—å —É—á–∏—Ç—ã–≤–∞–µ—Ç Telegram
    initializeScrollToTop();
    handleTelegramKeyboard();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    loadAllSavedData();
    initializeDefaultData();
    loadInitialData();
    updateAllCalculations();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    initializeCurrentDate();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram
    startTelegramBackup();
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
    setTimeout(restoreNavigationState, 1000);
    
    // –ê–Ω–∏–º–∏—Ä—É–µ–º —á–∏—Å–ª–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(animateNumbersOnLoad, 500);
    
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Telegram WebApp');
});

// –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
window.addEventListener('beforeunload', function() {
    stopTelegramBackup();
    console.log('üîÑ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
});

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º, –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π —Ä–µ—à–µ–Ω—ã.');