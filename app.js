// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let appData = {
    currentPeriod: {
        id: "2025_10",
        title: "–û–∫—Ç—è–±—Ä—å 2025",
        startDate: "2025-10-01",
        endDate: "2025-10-31",
        incomes: [],
        fixedExpenses: [],
        savingsPercentage: 20,
        dailyExpenses: []
    },
    historicalData: [
        {
            id: "2025_09",
            title: "–°–µ–Ω—Ç—è–±—Ä—å 2025",
            totalIncome: 125000,
            totalExpenses: 52000,
            savings: 25000,
            categorySpending: {
                food: 18500,
                transport: 8200,
                entertainment: 5500,
                shopping: 7800,
                housing: 25000,
                utilities: 3500,
                other: 2500
            },
            dailySpending: {
                "2025-09-01": 1100,
                "2025-09-02": 2200,
                "2025-09-03": 800,
                "2025-09-04": 1500,
                "2025-09-05": 3200,
                "2025-09-06": 900,
                "2025-09-07": 1300,
                "2025-09-08": 1800,
                "2025-09-09": 2100,
                "2025-09-10": 1600,
                "2025-09-11": 2500,
                "2025-09-12": 1200,
                "2025-09-13": 1400,
                "2025-09-14": 1900,
                "2025-09-15": 4500,
                "2025-09-16": 1100,
                "2025-09-17": 1700,
                "2025-09-18": 2000,
                "2025-09-19": 1300,
                "2025-09-20": 2800,
                "2025-09-21": 1500,
                "2025-09-22": 1600,
                "2025-09-23": 2200,
                "2025-09-24": 1800,
                "2025-09-25": 2400,
                "2025-09-26": 1900,
                "2025-09-27": 1700,
                "2025-09-28": 2100,
                "2025-09-29": 1500,
                "2025-09-30": 1800
            }
        },
        {
            id: "2025_08",
            title: "–ê–≤–≥—É—Å—Ç 2025",
            totalIncome: 120000,
            totalExpenses: 48000,
            categorySpending: {
                food: 16800,
                transport: 7500,
                entertainment: 8200,
                shopping: 6500,
                housing: 25000,
                utilities: 3200,
                other: 2000
            }
        }
    ],
    categories: [
        {id: "food", name: "–ï–¥–∞", icon: "üçΩÔ∏è", color: "#FF6B35", keywords: ["–∫–∞—Ñ–µ", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–ø—Ä–æ–¥—É–∫—Ç—ã", "–µ–¥–∞", "–æ–±–µ–¥", "–∑–∞–≤—Ç—Ä–∞–∫", "—É–∂–∏–Ω"]},
        {id: "transport", name: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", icon: "üöó", color: "#4ECDC4", keywords: ["—Ç–∞–∫—Å–∏", "–∞–≤—Ç–æ–±—É—Å", "–º–µ—Ç—Ä–æ", "–±–µ–Ω–∑–∏–Ω", "–ø–∞—Ä–∫–æ–≤–∫–∞"]},
        {id: "entertainment", name: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", icon: "üé¨", color: "#45B7D1", keywords: ["–∫–∏–Ω–æ", "–∫–æ–Ω—Ü–µ—Ä—Ç", "–∏–≥—Ä—ã", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"]},
        {id: "shopping", name: "–ü–æ–∫—É–ø–∫–∏", icon: "üõçÔ∏è", color: "#F39C12", keywords: ["–æ–¥–µ–∂–¥–∞", "–æ–±—É–≤—å", "—Ç–µ—Ö–Ω–∏–∫–∞", "–ø–æ–∫—É–ø–∫–∏"]},
        {id: "housing", name: "–ñ–∏–ª—å–µ", icon: "üè†", color: "#E74C3C", keywords: ["–∫–≤–∞—Ä—Ç–∏—Ä–∞", "–∞—Ä–µ–Ω–¥–∞", "–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ"]},
        {id: "utilities", name: "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ", icon: "üì°", color: "#9B59B6", keywords: ["–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "—Ç–µ–ª–µ—Ñ–æ–Ω", "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ"]},
        {id: "health", name: "–ó–¥–æ—Ä–æ–≤—å–µ", icon: "‚öïÔ∏è", color: "#27AE60", keywords: ["–≤—Ä–∞—á", "–ª–µ–∫–∞—Ä—Å—Ç–≤–∞", "–∞–ø—Ç–µ–∫–∞"]},
        {id: "other", name: "–ü—Ä–æ—á–µ–µ", icon: "üìã", color: "#95A5A6", keywords: []}
    ],
    predictions: {
        endOfMonthSpending: 58000,
        confidenceLevel: 0.85,
        recommendedDailyBudget: 1650,
        trendDirection: "increasing",
        anomalies: [
            {date: "2025-10-03", amount: 1500, reason: "Unusually high shopping expense"}
        ]
    },
    patterns: {
        weekdayVsWeekend: {weekday: 1200, weekend: 1800},
        regularExpenses: [
            {description: "–£—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—Ñ–µ", amount: 200, frequency: "daily"},
            {description: "–ü—Ä–æ–¥—É–∫—Ç—ã", amount: 2500, frequency: "weekly"}
        ],
        seasonalTrends: {
            highest_month: "–¥–µ–∫–∞–±—Ä—å",
            lowest_month: "—Ñ–µ–≤—Ä–∞–ª—å"
        }
    }
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
let editingState = {
    mode: null, // 'income', 'fixed', 'daily'
    itemId: null,
    originalData: null
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —à–∞–ø–∫–∏ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
let lastScrollY = window.scrollY;
let ticking = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeTabs();
    initializeHeaderScroll();
    initializeScrollToTop();
    loadAllSavedData(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    loadInitialData();
    updateAllCalculations();
    initializeCharts();
    initializeCalendarHeatmap();
});

// –ü–û–õ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–Ø
// ===============================

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
function loadAllSavedData() {
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    const savedAppData = localStorage.getItem('appData_currentPeriod');
    if (savedAppData) {
        try {
            const parsedData = JSON.parse(savedAppData);
            appData.currentPeriod = { ...appData.currentPeriod, ...parsedData };
            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:', appData.currentPeriod);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', e);
        }
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Ö–æ–¥—ã
    const savedIncomes = localStorage.getItem('appData_incomes');
    if (savedIncomes) {
        try {
            appData.currentPeriod.incomes = JSON.parse(savedIncomes);
            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–æ—Ö–æ–¥—ã:', appData.currentPeriod.incomes.length);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Ö–æ–¥–æ–≤:', e);
        }
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
    const savedFixedExpenses = localStorage.getItem('appData_fixedExpenses');
    if (savedFixedExpenses) {
        try {
            appData.currentPeriod.fixedExpenses = JSON.parse(savedFixedExpenses);
            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:', appData.currentPeriod.fixedExpenses.length);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤:', e);
        }
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ç—Ä–∞—Ç—ã
    const savedDailyExpenses = localStorage.getItem('appData_dailyExpenses');
    if (savedDailyExpenses) {
        try {
            appData.currentPeriod.dailyExpenses = JSON.parse(savedDailyExpenses);
            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ç—Ä–∞—Ç—ã:', appData.currentPeriod.dailyExpenses.length);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ç—Ä–∞—Ç:', e);
        }
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π
    const savedSavingsPercentage = localStorage.getItem('appData_savingsPercentage');
    if (savedSavingsPercentage) {
        appData.currentPeriod.savingsPercentage = parseInt(savedSavingsPercentage);
        console.log('–ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π:', appData.currentPeriod.savingsPercentage);
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const savedStartDate = localStorage.getItem('appData_startDate');
    const savedEndDate = localStorage.getItem('appData_endDate');
    if (savedStartDate) {
        appData.currentPeriod.startDate = savedStartDate;
        console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞:', savedStartDate);
    }
    if (savedEndDate) {
        appData.currentPeriod.endDate = savedEndDate;
        console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞:', savedEndDate);
    }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function saveToStorage(key, data) {
    try {
        localStorage.setItem(key, JSON.stringify(data));
        console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ ${key}:`, data);
    } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${key}:`, e);
    }
}

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
function saveAllData() {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥–∞
    const periodData = {
        id: appData.currentPeriod.id,
        title: appData.currentPeriod.title,
        startDate: appData.currentPeriod.startDate,
        endDate: appData.currentPeriod.endDate,
        savingsPercentage: appData.currentPeriod.savingsPercentage
    };
    saveToStorage('appData_currentPeriod', periodData);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –¥–∞–Ω–Ω—ã—Ö
    saveToStorage('appData_incomes', appData.currentPeriod.incomes);
    saveToStorage('appData_fixedExpenses', appData.currentPeriod.fixedExpenses);
    saveToStorage('appData_dailyExpenses', appData.currentPeriod.dailyExpenses);
    saveToStorage('appData_savingsPercentage', appData.currentPeriod.savingsPercentage);
    saveToStorage('appData_startDate', appData.currentPeriod.startDate);
    saveToStorage('appData_endDate', appData.currentPeriod.endDate);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è —à–∞–ø–∫–∏ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è Telegram WebApp)
function initializeHeaderScroll() {
    const header = document.getElementById('compactHeader');
    const navigation = document.getElementById('tabNavigation');
    
    function updateHeaderVisibility() {
        if (window.scrollY > lastScrollY && window.scrollY > 100) {
            // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ - —Å–∫—Ä—ã–≤–∞–µ–º —à–∞–ø–∫—É –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            header.style.transform = 'translateY(-100%)';
            navigation.style.transform = 'translateY(-100%)';
        } else {
            // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–ø–∫—É –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            header.style.transform = 'translateY(0)';
            navigation.style.transform = 'translateY(0)';
        }
        lastScrollY = window.scrollY;
        ticking = false;
    }

    function requestTick() {
        if (!ticking) {
            requestAnimationFrame(updateHeaderVisibility);
            ticking = true;
        }
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è Telegram WebApp
    window.addEventListener('scroll', requestTick, { passive: true });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    document.addEventListener('touchmove', requestTick, { passive: true });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ "–í–≤–µ—Ä—Ö"
function initializeScrollToTop() {
    const scrollBtn = document.getElementById('scrollToTopBtn');
    
    function toggleScrollButton() {
        if (window.scrollY > 300) {
            scrollBtn.classList.add('visible');
        } else {
            scrollBtn.classList.remove('visible');
        }
    }
    
    window.addEventListener('scroll', toggleScrollButton, { passive: true });
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –Ω–∞–≤–µ—Ä—Ö
function scrollToTop() {
    window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });
}

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
function saveSavingsPercentage(value) {
    appData.currentPeriod.savingsPercentage = parseInt(value);
    saveAllData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    updateAllCalculations();
}

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
function savePlanningPeriod() {
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;
    
    if (startDate) {
        appData.currentPeriod.startDate = startDate;
    }
    if (endDate) {
        appData.currentPeriod.endDate = endDate;
    }
    
    saveAllData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    updateAllCalculations();
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º —Å–æ —Å—Ç—Ä–µ–ª–∫–∞–º–∏
function scrollTabs(direction) {
    const container = document.getElementById('tabsContainer');
    const scrollAmount = 200;
    
    if (direction === -1) {
        container.scrollBy({ left: -scrollAmount, behavior: 'smooth' });
    } else {
        container.scrollBy({ left: scrollAmount, behavior: 'smooth' });
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∞–º–∏ (—É–±—Ä–∞–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª–∞–¥–∫–∏ "daily")
function initializeTabs() {
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');

    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            const tabId = button.dataset.tab;

            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            tabButtons.forEach(btn => btn.classList.remove('active'));
            tabContents.forEach(content => content.classList.remove('active'));

            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            button.classList.add('active');
            const targetContent = document.getElementById(tabId);
            if (targetContent) {
                targetContent.classList.add('active');
            }

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
            if (tabId === 'analytics') {
                setTimeout(() => {
                    updateCharts();
                }, 100);
            }
        });
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function loadInitialData() {
    renderIncomes();
    renderFixedExpenses();
    renderDailyExpenses();
    renderArchive();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–æ—Ä–º –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');
    const savingsInput = document.getElementById('savingsPercentage');
    const savingsDisplay = document.getElementById('savingsPercentageDisplay');

    if (startDateInput) startDateInput.value = appData.currentPeriod.startDate;
    if (endDateInput) endDateInput.value = appData.currentPeriod.endDate;
    if (savingsInput) savingsInput.value = appData.currentPeriod.savingsPercentage;
    if (savingsDisplay) savingsDisplay.textContent = appData.currentPeriod.savingsPercentage;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
function updateAllCalculations() {
    const totalIncome = appData.currentPeriod.incomes.reduce((sum, income) => sum + income.amount, 0);
    const totalFixed = appData.currentPeriod.fixedExpenses.reduce((sum, expense) => sum + expense.amount, 0);
    const totalSavings = totalIncome * appData.currentPeriod.savingsPercentage / 100;
    const totalDailyExpenses = appData.currentPeriod.dailyExpenses.reduce((sum, expense) => sum + expense.amount, 0);
    const totalSpent = totalFixed + totalDailyExpenses;
    const remainingBudget = totalIncome - totalSpent - totalSavings;

    // –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç
    const startDate = new Date(appData.currentPeriod.startDate);
    const endDate = new Date(appData.currentPeriod.endDate);
    const totalDays = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1;
    const dailyBudget = Math.max(remainingBudget / totalDays, 0);

    // –¢—Ä–∞—Ç—ã —Å–µ–≥–æ–¥–Ω—è
    const today = new Date().toISOString().split('T')[0];
    const todayExpenses = appData.currentPeriod.dailyExpenses.filter(exp => exp.date === today);
    const todaySpent = todayExpenses.reduce((sum, expense) => sum + expense.amount, 0);
    const todayRemaining = dailyBudget - todaySpent;
    const todayProgress = dailyBudget > 0 ? Math.min((todaySpent / dailyBudget) * 100, 100) : 0;

    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    updateElement('totalIncome', formatCurrency(totalIncome));
    updateElement('totalSpent', formatCurrency(totalSpent));
    updateElement('totalSavings', formatCurrency(totalSavings));
    updateElement('remainingBudget', formatCurrency(remainingBudget));
    updateElement('dailyBudget', formatCurrency(dailyBudget));
    updateElement('todaySpent', formatCurrency(todaySpent));
    updateElement('todayRemaining', formatCurrency(todayRemaining));

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã
    const todayProgressBar = document.getElementById('todayProgress');
    if (todayProgressBar) {
        todayProgressBar.style.width = `${todayProgress}%`;
        todayProgressBar.className = `progress-fill ${todayProgress > 100 ? 'error' : todayProgress > 80 ? 'warning' : 'primary'}`;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π
    const currentSavings = totalIncome * 0.65 * appData.currentPeriod.savingsPercentage / 100; // –¢–µ–∫—É—â–∏–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è (65% –º–µ—Å—è—Ü–∞ –ø—Ä–æ—à–ª–æ)
    const savingsProgress = totalSavings > 0 ? (currentSavings / totalSavings) * 100 : 0;
    const savingsProgressBar = document.getElementById('savingsProgress');
    if (savingsProgressBar) {
        savingsProgressBar.style.width = `${Math.min(savingsProgress, 100)}%`;
    }
    
    updateElement('savingsGoal', formatCurrency(totalSavings));
    updateElement('savingsProgressText', `${formatCurrency(currentSavings)} –∏–∑ ${formatCurrency(totalSavings)}`);
}

// –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–û–•–û–î–ê–ú–ò –° –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï–ú –ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï–ú
function addIncome() {
    const titleInput = document.getElementById('incomeTitle');
    const amountInput = document.getElementById('incomeAmount');
    const categorySelect = document.getElementById('incomeCategory');

    const title = titleInput.value.trim();
    const amount = parseFloat(amountInput.value);
    const category = categorySelect.value;

    if (!title || !amount || amount <= 0) {
        return;
    }

    if (editingState.mode === 'income' && editingState.itemId) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ—Ö–æ–¥
        const incomeIndex = appData.currentPeriod.incomes.findIndex(inc => inc.id === editingState.itemId);
        if (incomeIndex !== -1) {
            appData.currentPeriod.incomes[incomeIndex] = {
                ...appData.currentPeriod.incomes[incomeIndex],
                name: title,
                amount: amount,
                category: category
            };
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cancelEdit();
        
        // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
        const button = document.querySelector('[onclick="addIncome()"]');
        if (button) button.textContent = '–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥';
    } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ—Ö–æ–¥
        const newIncome = {
            id: Date.now(),
            name: title,
            amount: amount,
            category: category,
            date: new Date().toISOString().split('T')[0]
        };

        appData.currentPeriod.incomes.push(newIncome);
    }

    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    saveAllData();

    titleInput.value = '';
    amountInput.value = '';
    categorySelect.value = 'work';

    renderIncomes();
    updateAllCalculations();
}

function editIncome(id) {
    const income = appData.currentPeriod.incomes.find(inc => inc.id === id);
    if (!income) return;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    editingState.mode = 'income';
    editingState.itemId = id;
    editingState.originalData = { ...income };

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    document.getElementById('incomeTitle').value = income.name;
    document.getElementById('incomeAmount').value = income.amount;
    document.getElementById('incomeCategory').value = income.category;

    // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    const button = document.querySelector('[onclick="addIncome()"]');
    if (button) button.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';

    // –°–∫—Ä–æ–ª–ª–∏–º –∫ —Ñ–æ—Ä–º–µ
    document.getElementById('incomeTitle').scrollIntoView({ behavior: 'smooth', block: 'center' });
    document.getElementById('incomeTitle').focus();
}

function removeIncome(id) {
    const income = appData.currentPeriod.incomes.find(inc => inc.id === id);
    if (!income) return;

    if (confirm(`–£–¥–∞–ª–∏—Ç—å –¥–æ—Ö–æ–¥ "${income.name}"?`)) {
        appData.currentPeriod.incomes = appData.currentPeriod.incomes.filter(inc => inc.id !== id);
        
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        saveAllData();
        
        renderIncomes();
        updateAllCalculations();
    }
}

function renderIncomes() {
    const container = document.getElementById('incomeList');
    if (!container) return;

    if (appData.currentPeriod.incomes.length === 0) {
        container.innerHTML = '<div class="empty-state">–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Ö–æ–¥–æ–≤</div>';
        return;
    }

    container.innerHTML = appData.currentPeriod.incomes.map(income => `
        <div class="list-item ${editingState.mode === 'income' && editingState.itemId === income.id ? 'editing' : ''}">
            <div class="item-info">
                <div class="item-name">${income.name}</div>
                <div class="item-amount">${formatCurrency(income.amount)}</div>
                <div class="item-category">${getCategoryName(income.category)} ‚Ä¢ ${formatDate(income.date)}</div>
            </div>
            <div class="item-actions">
                <button onclick="editIncome(${income.id})" class="action-btn edit">–ò–∑–º–µ–Ω–∏—Ç—å</button>
                <button onclick="removeIncome(${income.id})" class="action-btn danger">–£–¥–∞–ª–∏—Ç—å</button>
            </div>
        </div>
    `).join('');
}

// –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ú–ò –†–ê–°–•–û–î–ê–ú–ò –° –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï–ú –ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï–ú
function addFixedExpense() {
    const titleInput = document.getElementById('expenseTitle');
    const amountInput = document.getElementById('expenseAmount');
    const categorySelect = document.getElementById('expenseCategory');

    const title = titleInput.value.trim();
    const amount = parseFloat(amountInput.value);
    const category = categorySelect.value;

    if (!title || !amount || amount <= 0) {
        return;
    }

    if (editingState.mode === 'fixed' && editingState.itemId) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞—Å—Ö–æ–¥
        const expenseIndex = appData.currentPeriod.fixedExpenses.findIndex(exp => exp.id === editingState.itemId);
        if (expenseIndex !== -1) {
            appData.currentPeriod.fixedExpenses[expenseIndex] = {
                ...appData.currentPeriod.fixedExpenses[expenseIndex],
                name: title,
                amount: amount,
                category: category,
                icon: getCategoryIcon(category),
                color: getCategoryColor(category)
            };
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cancelEdit();
        
        // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
        const button = document.querySelector('[onclick="addFixedExpense()"]');
        if (button) button.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥';
    } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥
        const newExpense = {
            id: Date.now(),
            name: title,
            amount: amount,
            category: category,
            icon: getCategoryIcon(category),
            color: getCategoryColor(category)
        };

        appData.currentPeriod.fixedExpenses.push(newExpense);
    }

    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    saveAllData();

    titleInput.value = '';
    amountInput.value = '';
    categorySelect.value = 'housing';

    renderFixedExpenses();
    updateAllCalculations();
}

function editFixedExpense(id) {
    const expense = appData.currentPeriod.fixedExpenses.find(exp => exp.id === id);
    if (!expense) return;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    editingState.mode = 'fixed';
    editingState.itemId = id;
    editingState.originalData = { ...expense };

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    document.getElementById('expenseTitle').value = expense.name;
    document.getElementById('expenseAmount').value = expense.amount;
    document.getElementById('expenseCategory').value = expense.category;

    // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    const button = document.querySelector('[onclick="addFixedExpense()"]');
    if (button) button.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';

    // –°–∫—Ä–æ–ª–ª–∏–º –∫ —Ñ–æ—Ä–º–µ
    document.getElementById('expenseTitle').scrollIntoView({ behavior: 'smooth', block: 'center' });
    document.getElementById('expenseTitle').focus();
}

function removeFixedExpense(id) {
    const expense = appData.currentPeriod.fixedExpenses.find(exp => exp.id === id);
    if (!expense) return;

    if (confirm(`–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ "${expense.name}"?`)) {
        appData.currentPeriod.fixedExpenses = appData.currentPeriod.fixedExpenses.filter(exp => exp.id !== id);
        
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        saveAllData();
        
        renderFixedExpenses();
        updateAllCalculations();
    }
}

function renderFixedExpenses() {
    const container = document.getElementById('fixedExpensesList');
    if (!container) return;

    if (appData.currentPeriod.fixedExpenses.length === 0) {
        container.innerHTML = '<div class="empty-state">–ü–æ–∫–∞ –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤</div>';
        return;
    }

    container.innerHTML = appData.currentPeriod.fixedExpenses.map(expense => `
        <div class="list-item ${editingState.mode === 'fixed' && editingState.itemId === expense.id ? 'editing' : ''}">
            <div class="item-info">
                <div class="item-name">${expense.icon} ${expense.name}</div>
                <div class="item-amount">${formatCurrency(expense.amount)}</div>
                <div class="item-category">${getCategoryName(expense.category)}</div>
            </div>
            <div class="item-actions">
                <button onclick="editFixedExpense(${expense.id})" class="action-btn edit">–ò–∑–º–µ–Ω–∏—Ç—å</button>
                <button onclick="removeFixedExpense(${expense.id})" class="action-btn danger">–£–¥–∞–ª–∏—Ç—å</button>
            </div>
        </div>
    `).join('');
}

// –£–ü–†–ê–í–õ–ï–ù–ò–ï –ï–ñ–ï–î–ù–ï–í–ù–´–ú–ò –¢–†–ê–¢–ê–ú–ò –° –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï–ú –ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï–ú
function addDailyExpense() {
    const titleInput = document.getElementById('dailyExpenseTitle');
    const amountInput = document.getElementById('dailyExpenseAmount');
    const categorySelect = document.getElementById('dailyExpenseCategory');

    const title = titleInput.value.trim();
    const amount = parseFloat(amountInput.value);
    const category = categorySelect.value;

    if (!title || !amount || amount <= 0) {
        return;
    }

    if (editingState.mode === 'daily' && editingState.itemId) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç—Ä–∞—Ç—É
        const expenseIndex = appData.currentPeriod.dailyExpenses.findIndex(exp => exp.id === editingState.itemId);
        if (expenseIndex !== -1) {
            appData.currentPeriod.dailyExpenses[expenseIndex] = {
                ...appData.currentPeriod.dailyExpenses[expenseIndex],
                description: title,
                amount: amount,
                category: category
            };
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cancelEdit();
        
        // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
        const button = document.querySelector('[onclick="addDailyExpense()"]');
        if (button) button.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É';
    } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞—Ç—É
        const newExpense = {
            id: Date.now(),
            date: new Date().toISOString().split('T')[0],
            amount: amount,
            description: title,
            category: category,
            predicted: false
        };

        appData.currentPeriod.dailyExpenses.push(newExpense);
    }

    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    saveAllData();

    titleInput.value = '';
    amountInput.value = '';
    categorySelect.value = 'food';

    renderDailyExpenses();
    updateAllCalculations();
}

function editDailyExpense(id) {
    const expense = appData.currentPeriod.dailyExpenses.find(exp => exp.id === id);
    if (!expense) return;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    editingState.mode = 'daily';
    editingState.itemId = id;
    editingState.originalData = { ...expense };

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    document.getElementById('dailyExpenseTitle').value = expense.description;
    document.getElementById('dailyExpenseAmount').value = expense.amount;
    document.getElementById('dailyExpenseCategory').value = expense.category;

    // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    const button = document.querySelector('[onclick="addDailyExpense()"]');
    if (button) button.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';

    // –°–∫—Ä–æ–ª–ª–∏–º –∫ —Ñ–æ—Ä–º–µ
    document.getElementById('dailyExpenseTitle').scrollIntoView({ behavior: 'smooth', block: 'center' });
    document.getElementById('dailyExpenseTitle').focus();
}

function removeDailyExpense(id) {
    const expense = appData.currentPeriod.dailyExpenses.find(exp => exp.id === id);
    if (!expense) return;

    if (confirm(`–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—É "${expense.description}"?`)) {
        appData.currentPeriod.dailyExpenses = appData.currentPeriod.dailyExpenses.filter(exp => exp.id !== id);
        
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        saveAllData();
        
        renderDailyExpenses();
        updateAllCalculations();
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function cancelEdit() {
    editingState.mode = null;
    editingState.itemId = null;
    editingState.originalData = null;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫
    const incomeBtn = document.querySelector('[onclick="addIncome()"]');
    const fixedBtn = document.querySelector('[onclick="addFixedExpense()"]');
    const dailyBtn = document.querySelector('[onclick="addDailyExpense()"]');
    
    if (incomeBtn) incomeBtn.textContent = '–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥';
    if (fixedBtn) fixedBtn.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥';
    if (dailyBtn) dailyBtn.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É';
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—ã
    const forms = ['incomeTitle', 'incomeAmount', 'expenseTitle', 'expenseAmount', 'dailyExpenseTitle', 'dailyExpenseAmount'];
    forms.forEach(formId => {
        const element = document.getElementById(formId);
        if (element) element.value = '';
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const categorySelects = ['incomeCategory', 'expenseCategory', 'dailyExpenseCategory'];
    categorySelects.forEach((selectId, index) => {
        const element = document.getElementById(selectId);
        if (element) {
            const defaultValues = ['work', 'housing', 'food'];
            element.value = defaultValues[index];
        }
    });
    
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    renderIncomes();
    renderFixedExpenses();
    renderDailyExpenses();
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ç—Ä–∞—Ç (–æ–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±–µ —Å–µ–∫—Ü–∏–∏)
function renderDailyExpenses() {
    const container = document.getElementById('dailyExpensesList');
    const allContainer = document.getElementById('allDailyExpenses');
    
    const sortedExpenses = appData.currentPeriod.dailyExpenses
        .sort((a, b) => new Date(b.date) - new Date(a.date));

    const recentExpenses = sortedExpenses.slice(0, 5);

    const expenseHTML = (expenses) => expenses.map(expense => `
        <div class="list-item ${editingState.mode === 'daily' && editingState.itemId === expense.id ? 'editing' : ''}">
            <div class="item-info">
                <div class="item-name">${getCategoryIcon(expense.category)} ${expense.description}</div>
                <div class="item-amount">${formatCurrency(expense.amount)}</div>
                <div class="item-category">${getCategoryName(expense.category)} ‚Ä¢ ${formatDate(expense.date)}</div>
            </div>
            <div class="item-actions">
                <button onclick="editDailyExpense(${expense.id})" class="action-btn edit">–ò–∑–º–µ–Ω–∏—Ç—å</button>
                <button onclick="removeDailyExpense(${expense.id})" class="action-btn danger">–£–¥–∞–ª–∏—Ç—å</button>
            </div>
        </div>
    `).join('');

    if (container) {
        container.innerHTML = recentExpenses.length === 0 
            ? '<div class="empty-state">–ü–æ–∫–∞ –Ω–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ç—Ä–∞—Ç</div>'
            : expenseHTML(recentExpenses);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç—Ä–∞—Ç—ã –≤ allDailyExpenses
    if (allContainer) {
        if (sortedExpenses.length > 5) {
            allContainer.innerHTML = `
                <div style="margin-top: 24px;">
                    <h4 style="margin-bottom: 16px; color: var(--color-text-secondary);">–í—Å–µ —Ç—Ä–∞—Ç—ã</h4>
                    ${expenseHTML(sortedExpenses.slice(5))}
                </div>
            `;
        } else {
            allContainer.innerHTML = '';
        }
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–æ–º
function renderArchive() {
    const container = document.getElementById('archiveList');
    if (!container) return;

    if (appData.historicalData.length === 0) {
        container.innerHTML = '<div class="empty-state">–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç</div>';
        return;
    }

    container.innerHTML = appData.historicalData.map(period => `
        <div class="archive-item">
            <div class="item-info">
                <div class="item-name">üìÖ ${period.title}</div>
                <div class="item-category">
                    –î–æ—Ö–æ–¥—ã: ${formatCurrency(period.totalIncome)} ‚Ä¢ 
                    –†–∞—Å—Ö–æ–¥—ã: ${formatCurrency(period.totalExpenses)} ‚Ä¢ 
                    –°–±–µ—Ä–µ–∂–µ–Ω–∏—è: ${formatCurrency(period.savings || 0)}
                </div>
            </div>
            <div class="item-actions">
                <button onclick="loadPeriod('${period.id}')" class="action-btn">–ó–∞–≥—Ä—É–∑–∏—Ç—å</button>
            </div>
        </div>
    `).join('');
}

function loadPeriod(periodId) {
    const period = appData.historicalData.find(p => p.id === periodId);
    if (!period) return;

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    console.log('Loading period:', period);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π
function updateSavingsPercentage(value) {
    const display = document.getElementById('savingsPercentageDisplay');
    if (display) {
        display.textContent = value;
    }
    appData.currentPeriod.savingsPercentage = parseInt(value);
    updateAllCalculations();
}

// –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ï–†–ò–û–î–û–ú –° –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï–ú
function changePeriod() {
    const modal = document.getElementById('periodModal');
    const startInput = document.getElementById('modalStartDate');
    const endInput = document.getElementById('modalEndDate');
    
    if (startInput) startInput.value = appData.currentPeriod.startDate;
    if (endInput) endInput.value = appData.currentPeriod.endDate;
    
    if (modal) {
        modal.classList.remove('hidden');
    }
}

function closePeriodModal() {
    const modal = document.getElementById('periodModal');
    if (modal) {
        modal.classList.add('hidden');
    }
}

function savePeriodChange() {
    const startInput = document.getElementById('modalStartDate');
    const endInput = document.getElementById('modalEndDate');
    
    if (startInput && endInput) {
        appData.currentPeriod.startDate = startInput.value;
        appData.currentPeriod.endDate = endInput.value;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–∏–æ–¥–∞
        const startDate = new Date(startInput.value);
        const month = startDate.toLocaleString('ru-RU', { month: 'long' });
        const year = startDate.getFullYear();
        appData.currentPeriod.title = `${month.charAt(0).toUpperCase() + month.slice(1)} ${year}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–∏–æ–¥–∞
        const periodBtn = document.querySelector('.current-period');
        if (periodBtn) {
            periodBtn.textContent = appData.currentPeriod.title;
        }
        
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        saveAllData();
        
        updateAllCalculations();
        closePeriodModal();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º
function initializeCharts() {
    // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Chart.js –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
}

function updateCharts() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
}

// –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function initializeCalendarHeatmap() {
    const container = document.getElementById('calendarHeatmap');
    if (!container) return;

    const today = new Date();
    const startDate = new Date(today.getFullYear(), today.getMonth(), 1);
    const endDate = new Date(today.getFullYear(), today.getMonth() + 1, 0);
    
    let html = '';
    const currentDate = new Date(startDate);

    while (currentDate <= endDate) {
        const dateStr = currentDate.toISOString().split('T')[0];
        const dayExpenses = appData.currentPeriod.dailyExpenses
            .filter(expense => expense.date === dateStr)
            .reduce((sum, expense) => sum + expense.amount, 0);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (0-4)
        let level = 0;
        if (dayExpenses > 0) {
            if (dayExpenses < 500) level = 1;
            else if (dayExpenses < 1500) level = 2;
            else if (dayExpenses < 3000) level = 3;
            else level = 4;
        }
        
        html += `
            <div class="calendar-day" 
                 data-level="${level}" 
                 title="${currentDate.getDate()} ${currentDate.toLocaleString('ru-RU', { month: 'long' })}: ${formatCurrency(dayExpenses)}">
                ${currentDate.getDate()}
            </div>
        `;
        
        currentDate.setDate(currentDate.getDate() + 1);
    }

    container.innerHTML = html;
}

// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–Ø
// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)
function exportData() {
    const dataToExport = {
        currentPeriod: appData.currentPeriod,
        exportDate: new Date().toISOString(),
        version: "1.0"
    };
    
    const dataStr = JSON.stringify(dataToExport, null, 2);
    const dataBlob = new Blob([dataStr], {type: 'application/json'});
    
    const link = document.createElement('a');
    link.href = URL.createObjectURL(dataBlob);
    link.download = `personal-finance-backup-${new Date().toISOString().split('T')[0]}.json`;
    link.click();
}

// –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
function importData(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const importedData = JSON.parse(e.target.result);
            
            if (importedData.currentPeriod) {
                appData.currentPeriod = importedData.currentPeriod;
                saveAllData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                loadInitialData();
                updateAllCalculations();
                
                console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    };
    reader.readAsText(file);
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)
function clearAllData() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!')) {
        localStorage.clear();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
        appData.currentPeriod.incomes = [];
        appData.currentPeriod.fixedExpenses = [];
        appData.currentPeriod.dailyExpenses = [];
        appData.currentPeriod.savingsPercentage = 20;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        loadInitialData();
        updateAllCalculations();
        
        console.log('–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    }
}

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', function(e) {
    saveAllData();
    console.log('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
});

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (—Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ)
setInterval(function() {
    saveAllData();
    console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
}, 60000); // 60 —Å–µ–∫—É–Ω–¥

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function updateElement(id, value) {
    const element = document.getElementById(id);
    if (element) {
        element.textContent = value;
    }
}

function formatCurrency(amount) {
    return new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: 'RUB',
        minimumFractionDigits: 0
    }).format(amount).replace('‚ÇΩ', '‚ÇΩ');
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'short'
    });
}

function getCategoryName(categoryId) {
    const category = appData.categories.find(cat => cat.id === categoryId);
    return category ? category.name : '–ü—Ä–æ—á–µ–µ';
}

function getCategoryIcon(categoryId) {
    const category = appData.categories.find(cat => cat.id === categoryId);
    return category ? category.icon : 'üìã';
}

function getCategoryColor(categoryId) {
    const category = appData.categories.find(cat => cat.id === categoryId);
    return category ? category.color : '#95A5A6';
}

// –§—É–Ω–∫—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω—ã
function showToast(message, type = 'info') {
    // –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    return;
}